
.. include:: _static/headings.txt

.. module:: dabo.db.dCursorMixin

.. _dabo.db.dCursorMixin.dCursorMixin:

==================================================
|doc_title|  **dCursorMixin.dCursorMixin** - class
==================================================

Dabo's cursor class, representing the lowest tier.



|hierarchy| Inheritance Diagram
===============================

Inheritance diagram for: **dCursorMixin**

.. inheritance-diagram:: dCursorMixin


|supclasses| Known Superclasses
===============================

* :ref:`dabo.dObject.dObject`



|subclasses| Known Subclasses
=============================

* dabo.db.dConnection.DaboCursor - can not provide a link
* dabo.db.dConnection.DaboCursor - can not provide a link
* dabo.db.dConnection.DaboCursor - can not provide a link
* dabo.db.dConnection.DaboCursor - can not provide a link



|API| Class API
===============


.. autoclass:: dabo.db.dCursorMixin.dCursorMixin

   .. automethod:: dabo.db.dCursorMixin.dCursorMixin.__init__

|method_summary| Properties Summary
===================================


================================== ========================
:ref:`Application <no-1319>`       Read-only object reference to the Dabo Application object.  (dApp).
:ref:`AutoPopulatePK <no-1320>`    When inserting a new record, does the backend populate the PK field?
:ref:`AutoQuoteNames <no-1321>`    When True (default), table and column names are enclosed with
:ref:`AutoSQL <no-1322>`           Returns the SQL statement automatically generated by the sql manager.
:ref:`AuxCursor <no-1323>`         Auxiliary cursor object that handles queries that would otherwise
:ref:`BackendObject <no-1324>`     Returns a reference to the object defining backend-specific behavior (dBackend)
:ref:`BaseClass <no-1325>`         The base Dabo class of the object. Read-only.  (class)
:ref:`BasePrefKey <no-1326>`       Base key used when saving/restoring preferences  (str)
:ref:`Class <no-1327>`             The class the object is based on. Read-only.  (class)
:ref:`CurrentSQL <no-1328>`        Returns the current SQL that will be run, which is one of UserSQL or AutoSQL.
:ref:`DataStructure <no-1329>`     Returns the structure of the cursor in a tuple of 6-tuples.
:ref:`Encoding <no-1330>`          Encoding type used by the Backend  (string)
:ref:`FieldDescription <no-1331>`  Tuple of field names and types, as returned by the backend  (tuple)
:ref:`IsAdding <no-1332>`          Returns True if the current record is new and unsaved
:ref:`IsPrefCursor <no-1333>`      Returns True if this cursor is used for managing internal
:ref:`KeyField <no-1334>`          Name of field that is the PK. If multiple fields make up the key,
:ref:`LastSQL <no-1335>`           Returns the last executed SQL statement.
:ref:`LogEvents <no-1336>`         Specifies which events to log.  (list of strings)
:ref:`Name <no-1337>`              The name of the object.  (str)
:ref:`ParamPlaceholder <no-1338>`  The character(s) used to indicate a parameter in an SQL statement.
:ref:`Parent <no-1339>`            The containing object.  (obj)
:ref:`PreferenceManager <no-1340>` Reference to the Preference Management object  (dPref)
:ref:`Record <no-1341>`            Represents a record in the data set. You can address individual
:ref:`RowCount <no-1342>`          Current number of rows in the recordset. Read-only.
:ref:`RowNumber <no-1343>`         Current row in the recordset.
:ref:`Table <no-1344>`             The name of the table in the database that this cursor is updating.
:ref:`UserSQL <no-1345>`           SQL statement to run. If set, the automatic SQL builder will not be used.
:ref:`VirtualFields <no-1346>`     A dictionary mapping virtual_field_name to a function to call.

================================== ========================


Properties
==========

.. _no-1320:

**AutoPopulatePK** 

When inserting a new record, does the backend populate the PK field?



-------

.. _no-1321:

**AutoQuoteNames** 

When True (default), table and column names are enclosed with
    quotes during SQL creation.  (bool)



-------

.. _no-1322:

**AutoSQL** 

Returns the SQL statement automatically generated by the sql manager.



-------

.. _no-1323:

**AuxCursor** 

Auxiliary cursor object that handles queries that would otherwise
    affect the main cursor's data set.  (dCursorMixin subclass)



-------

.. _no-1324:

**BackendObject** 

Returns a reference to the object defining backend-specific behavior (dBackend)



-------

.. _no-1328:

**CurrentSQL** 

Returns the current SQL that will be run, which is one of UserSQL or AutoSQL.



-------

.. _no-1329:

**DataStructure** 

Returns the structure of the cursor in a tuple of 6-tuples.

        | 0: field alias (str)
        | 1: data type code (str)
        | 2: pk field (bool)
        | 3: table name (str)
        | 4: field name (str)
        | 5: field scale for numeric, display size for character
            type fields (int or None)

        This information will try to come from a few places, in order:

        1) The explicitly-set DataStructure property
        2) The backend table method

        



-------

.. _no-1330:

**Encoding** 

Encoding type used by the Backend  (string)



-------

.. _no-1331:

**FieldDescription** 

Tuple of field names and types, as returned by the backend  (tuple)



-------

.. _no-1332:

**IsAdding** 

Returns True if the current record is new and unsaved



-------

.. _no-1333:

**IsPrefCursor** 

Returns True if this cursor is used for managing internal
    Dabo preferences and settings. Default=False.  (bool)



-------

.. _no-1334:

**KeyField** 

Name of field that is the PK. If multiple fields make up the key,
    separate the fields with commas. (str)



-------

.. _no-1335:

**LastSQL** 

Returns the last executed SQL statement.



-------

.. _no-1338:

**ParamPlaceholder** 

The character(s) used to indicate a parameter in an SQL statement.
    This can be different for different backend systems. Read-only.  (str)



-------

.. _no-1341:

**Record** 

Represents a record in the data set. You can address individual
    columns by referring to 'self.Record.fieldName' (read-only) (no type)



-------

.. _no-1342:

**RowCount** 

Current number of rows in the recordset. Read-only.



-------

.. _no-1343:

**RowNumber** 

Current row in the recordset.



-------

.. _no-1344:

**Table** 

The name of the table in the database that this cursor is updating.



-------

.. _no-1345:

**UserSQL** 

SQL statement to run. If set, the automatic SQL builder will not be used.



-------

.. _no-1346:

**VirtualFields** 

A dictionary mapping virtual_field_name to a function to call.

    The specified function will be called when getFieldVal() is called on
    the specified field name.

    The common use is to assign a bare function to a virtual field, but you can
    also specify args and kwargs by assigning a dict with 'func', 'args' and
    'kwargs' keys.



-------


Properties - inherited
========================

.. _no-1319:

**Application** 

Read-only object reference to the Dabo Application object.  (dApp).


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1325:

**BaseClass** 

The base Dabo class of the object. Read-only.  (class)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1326:

**BasePrefKey** 

Base key used when saving/restoring preferences  (str)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1327:

**Class** 

The class the object is based on. Read-only.  (class)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1336:

**LogEvents** 


    Specifies which events to log.  (list of strings)

    If the first element is 'All', all events except the following listed events
    will be logged.
    Event logging is resource-intensive, so in addition to setting this LogEvents
    property, you also need to make the following call:

        >>> dabo.eventLogging = True

    


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1337:

**Name** 

The name of the object.  (str)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1339:

**Parent** 

The containing object.  (obj)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1340:

**PreferenceManager** 

Reference to the Preference Management object  (dPref)


Inherited from: :ref:`dabo.dObject.dObject`

-------


|method_summary| Events Summary
===============================


========== ========================

========== ========================


|method_summary| Methods Summary
================================


============================================= ========================
:ref:`addField <no-1347>`                     Add a field to the field clause.
:ref:`addFrom <no-1348>`                      Add a table to the sql statement. For joins, use
:ref:`addGroupBy <no-1349>`                   Add an expression to the group-by clause.
:ref:`addJoin <no-1350>`                      Add a joined table to the sql statement.
:ref:`addOrderBy <no-1351>`                   Add an expression to the order-by clause.
:ref:`addWhere <no-1352>`                     Add an expression to the where clause.
:ref:`afterInit <no-1353>`                    Subclass hook. Called after the object's __init__ has run fully.
:ref:`appendDataSet <no-1354>`                Appends the rows in the passed dataset to this cursor's dataset. No checking
:ref:`autoBindEvents <no-1355>`               Automatically bind any on*() methods to the associated event.
:ref:`beforeInit <no-1356>`                   Subclass hook. Called before the object is fully instantiated.
:ref:`beginTransaction <no-1357>`             Begin a SQL transaction.
:ref:`bindEvent <no-1358>`                    Bind a dEvent to a callback function.
:ref:`bindEvents <no-1359>`                   Bind a sequence of [dEvent, callback] lists.
:ref:`cancel <no-1360>`                       Revert any changes to the data set back to the original values.
:ref:`checkPK <no-1361>`                      Verify that the field(s) specified in the KeyField prop exist.
:ref:`clearLastRequeryTime <no-1362>`         Clear the last requery time to force the cache to be expired.
:ref:`clearSQL <no-1363>`                     
:ref:`cloneRecord <no-1364>`                  Creates a copy of the current record and adds it to the dataset.
:ref:`commitTransaction <no-1365>`            Commit a SQL transaction.
:ref:`createAssociation <no-1366>`            Create a many-to-many association.
:ref:`createIndexes <no-1367>`                Create indexes based on the table definition.
:ref:`createTable <no-1368>`                  Create a table based on the table definition.
:ref:`createTableAndIndexes <no-1369>`        Create a table and its indexes based on the table definition.
:ref:`cursorToXML <no-1370>`                  Returns an XML string containing the information necessary to
:ref:`delete <no-1371>`                       Delete the specified row, or the currently active row.
:ref:`escQuote <no-1372>`                     Escape special characters in SQL strings.
:ref:`escape <no-1373>`                       Provides the proper escaping of values in XML output
:ref:`execute <no-1374>`                      Execute the sql, and populate the DataSet if it is a select statement.
:ref:`executeSQL <no-1375>`                   
:ref:`executeSafe <no-1376>`                  Execute the passed SQL using an auxiliary cursor.
:ref:`filter <no-1377>`                       Apply a filter to the current records.
:ref:`filterByExpression <no-1378>`           Allows you to filter by any valid Python expression.
:ref:`first <no-1379>`                        Move the record pointer to the first record of the data set.
:ref:`flush <no-1380>`                        Some backends need to be prompted to flush changes
:ref:`formatBLOB <no-1381>`                   Format BLOB values for the backend
:ref:`formatDateTime <no-1382>`               Format DateTime values for the backend
:ref:`formatNone <no-1383>`                   Format None values for the backend
:ref:`genTempAutoPK <no-1384>`                Create a temporary PK for a new record. Set the key field to this
:ref:`getAbsoluteName <no-1385>`              Return the fully qualified name of the object.
:ref:`getChangedRows <no-1386>`               Returns a list of rows with changes.
:ref:`getChildFilterClause <no-1387>`         Get the child filter part of the sql statement.
:ref:`getCurrentRecord <no-1388>`             Returns the current record (as determined by self.RowNumber)
:ref:`getDataDiff <no-1389>`                  Create a compact representation of all the modified records
:ref:`getDataSet <no-1390>`                   Get the entire data set encapsulated in a dDataSet object.
:ref:`getDataTypes <no-1391>`                 Returns the internal _types dict.
:ref:`getFieldClause <no-1392>`               Get the field clause of the sql statement.
:ref:`getFieldInfoFromDescription <no-1393>`  Get field information from the cursor description.
:ref:`getFieldVal <no-1394>`                  Return the value of the specified field in the current or specified row.
:ref:`getFields <no-1395>`                    Get field information about the backend table.
:ref:`getFromClause <no-1396>`                Get the from clause of the sql statement.
:ref:`getGroupByClause <no-1397>`             Get the group-by clause of the sql statement.
:ref:`getJoinClause <no-1398>`                Get the join clause of the sql statement.
:ref:`getLastInsertID <no-1399>`              Return the most recently generated PK
:ref:`getLimit <no-1400>`                     Get the limit clause of the sql statement.
:ref:`getLimitClause <no-1401>`               Get the limit clause of the sql statement.
:ref:`getLimitPosition <no-1402>`             Return the position to place the limit clause.
:ref:`getLimitWord <no-1403>`                 Return the word to use in the db-specific limit clause.
:ref:`getNonUpdateFields <no-1404>`           
:ref:`getOrderByClause <no-1405>`             Get the order-by clause of the sql statement.
:ref:`getPK <no-1406>`                        Returns the value of the PK field in the current or passed record number.
:ref:`getProperties <no-1407>`                Returns a dictionary of property name/value pairs.
:ref:`getRecordStatus <no-1408>`              Returns a dictionary containing an element for each changed
:ref:`getSQL <no-1409>`                       Get the complete SQL statement from all the parts.
:ref:`getSortCase <no-1410>`                  
:ref:`getSortColumn <no-1411>`                
:ref:`getSortOrder <no-1412>`                 
:ref:`getStructureOnlySql <no-1413>`          Creates a SQL statement that will not return any records.
:ref:`getTableRecordCount <no-1414>`          Get the number of records in the backend table.
:ref:`getTables <no-1415>`                    Return a tuple of tables in the current database.
:ref:`getWhereClause <no-1416>`               Get the where clause of the sql statement.
:ref:`getWordMatchFormat <no-1417>`           
:ref:`hasPK <no-1418>`                        Return True if the passed pk is present in the dataset.
:ref:`initEvents <no-1419>`                   Hook for subclasses. User code should do custom event binding
:ref:`initProperties <no-1420>`               Hook for subclasses. User subclasses should set properties
:ref:`isChanged <no-1421>`                    Return True if there are any changes to the local field values.
:ref:`last <no-1422>`                         Move the record pointer to the last record in the recordset.
:ref:`locate <no-1423>`                       Find the first row where the field value matches the passed value.
:ref:`lookupPKWithAdd <no-1424>`              Runs a lookup in the specified field for the desired value. If
:ref:`makePkWhere <no-1425>`                  Create the WHERE clause used for updates, based on the pk field.
:ref:`makeUpdClause <no-1426>`                Create the 'set field=val' section of the Update statement. Return a 2-tuple
:ref:`mmAddToBoth <no-1427>`                  Creates an association in a M-M relationship. If the relationship
:ref:`mmAssociateValue <no-1428>`             Associates the value in the 'other' table of a M-M relationship with the
:ref:`mmAssociateValues <no-1429>`            
:ref:`mmDissociateAll <no-1430>`              Removes all associations between the current record and the associated
:ref:`mmDissociateValue <no-1431>`            Removes the association between the current record and the specified value
:ref:`mmDissociateValues <no-1432>`           Removes the association between the current record and every item in 'listOfValues'
:ref:`mmGetAssociatedValues <no-1433>`        Returns a dataset containing the values for the specified fields
:ref:`mmSetFullAssociation <no-1434>`         Adds and/or removes association records so that the current record
:ref:`moveToPK <no-1435>`                     Find the record with the passed primary key, and make it active.
:ref:`moveToRowNum <no-1436>`                 Move the record pointer to the specified row number.
:ref:`new <no-1437>`                          Add a new record to the data set.
:ref:`next <no-1438>`                         Move the record pointer forward one position in the recordset.
:ref:`oldVal <no-1439>`                       Returns the value of the field as it existed after the last requery.
:ref:`pkExpression <no-1440>`                 Returns the PK expression for the passed record.
:ref:`pkFieldExpression <no-1441>`            Returns the field or comma-separated list of field names
:ref:`pregenPK <no-1442>`                     Various backend databases require that you manually
:ref:`prepareWhere <no-1443>`                 Modifies WHERE clauses as needed for each backend.
:ref:`prior <no-1444>`                        Move the record pointer back one position in the recordset.
:ref:`processFields <no-1445>`                
:ref:`raiseEvent <no-1446>`                   Send the event to all registered listeners.
:ref:`removeField <no-1447>`                  Remove a previously added field from the field clause.
:ref:`removeFilter <no-1448>`                 Remove the most recently applied filter.
:ref:`removeFilters <no-1449>`                Remove all applied filters, going back to the original data set.
:ref:`removeWhere <no-1450>`                  Remove an expression from the where clause.
:ref:`replace <no-1451>`                      Replaces the value of the specified field with the given value
:ref:`requery <no-1452>`                      
:ref:`rollbackTransaction <no-1453>`          Roll back (revert) a SQL transaction.
:ref:`save <no-1454>`                         Save any changes to the current record back to the data store.
:ref:`seek <no-1455>`                         Find the first row where the field value  matches the passed value.
:ref:`setChildFilter <no-1456>`               This method sets the appropriate WHERE filter for dependent child queries.
:ref:`setChildFilterClause <no-1457>`         Set the child filter clause of the sql statement.
:ref:`setCursorFactory <no-1458>`             
:ref:`setDataSet <no-1459>`                   Set the records of the cursor to the passed dDataSet instance.
:ref:`setDefaults <no-1460>`                  Set the default field values for newly added records. The
:ref:`setFieldClause <no-1461>`               Set the field clause of the sql statement.
:ref:`setFieldVal <no-1462>`                  Set the value of the specified field.
:ref:`setFieldVals <no-1463>`                 Set the value for multiple fields with one call by passing a dict containing
:ref:`setFromClause <no-1464>`                Set the from clause of the sql statement.
:ref:`setGroupByClause <no-1465>`             Set the group-by clause of the sql statement.
:ref:`setJoinClause <no-1466>`                Set the join clause of the sql statement.
:ref:`setLimit <no-1467>`                     Set the limit clause of the sql statement.
:ref:`setLimitClause <no-1468>`               Set the limit clause of the sql statement.
:ref:`setNewFlag <no-1469>`                   Set the current record to be flagged as a new record.
:ref:`setNonMatchChildFilterClause <no-1470>` Called when the parent has no records, which implies that the child
:ref:`setNonUpdateFields <no-1471>`           
:ref:`setOrderByClause <no-1472>`             Set the order-by clause of the sql statement.
:ref:`setProperties <no-1473>`                Sets a group of properties on the object all at once.
:ref:`setPropertiesFromAtts <no-1474>`        Sets a group of properties on the object all at once. This
:ref:`setValuesByDict <no-1475>`              Set the value for multiple fields with one call by passing a dict containing
:ref:`setWhereClause <no-1476>`               Set the where clause of the sql statement.
:ref:`sort <no-1477>`                         Sort the result set on the specified column in the specified order. If the sort
:ref:`super <no-1478>`                        This method used to call superclass code, but it's been removed.
:ref:`unbindEvent <no-1479>`                  Remove a previously registered event binding.

============================================= ========================


Methods
=======

.. _no-1347:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addField(self, exp, alias=None)

   Add a field to the field clause.



-------

.. _no-1348:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addFrom(self, exp, alias=None)

   
   Add a table to the sql statement. For joins, use
   the addJoin() method.
   



-------

.. _no-1349:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addGroupBy(self, exp)

   Add an expression to the group-by clause.



-------

.. _no-1350:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addJoin(self, tbl, joinCondition, joinType=None)

   Add a joined table to the sql statement.



-------

.. _no-1351:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addOrderBy(self, exp)

   Add an expression to the order-by clause.



-------

.. _no-1352:

.. function:: dabo.db.dCursorMixin.dCursorMixin.addWhere(self, exp, comp='and')

   Add an expression to the where clause.



-------

.. _no-1354:

.. function:: dabo.db.dCursorMixin.dCursorMixin.appendDataSet(self, ds, updateInternals=False)

   
   Appends the rows in the passed dataset to this cursor's dataset. No checking
   is done on the dataset columns to make sure that they are correct for this cursor;
   it is the responsibility of the caller to make sure that they match. If invalid data is
   passed, a dException.FieldNotFoundException will be raised.
   



-------

.. _no-1357:

.. function:: dabo.db.dCursorMixin.dCursorMixin.beginTransaction(self)

   Begin a SQL transaction.



-------

.. _no-1360:

.. function:: dabo.db.dCursorMixin.dCursorMixin.cancel(self, allRows=False, ignoreNoRecords=None)

   Revert any changes to the data set back to the original values.



-------

.. _no-1361:

.. function:: dabo.db.dCursorMixin.dCursorMixin.checkPK(self)

   Verify that the field(s) specified in the KeyField prop exist.



-------

.. _no-1362:

.. function:: dabo.db.dCursorMixin.dCursorMixin.clearLastRequeryTime(self)

   Clear the last requery time to force the cache to be expired.



-------

.. _no-1363:

.. function:: dabo.db.dCursorMixin.dCursorMixin.clearSQL(self)



-------

.. _no-1364:

.. function:: dabo.db.dCursorMixin.dCursorMixin.cloneRecord(self)

   Creates a copy of the current record and adds it to the dataset.



-------

.. _no-1365:

.. function:: dabo.db.dCursorMixin.dCursorMixin.commitTransaction(self)

   Commit a SQL transaction.



-------

.. _no-1366:

.. function:: dabo.db.dCursorMixin.dCursorMixin.createAssociation(self, mmOtherTable, mmOtherPKCol, assocTable, assocPKColThis, assocPKColOther)

   Create a many-to-many association.



-------

.. _no-1367:

.. function:: dabo.db.dCursorMixin.dCursorMixin.createIndexes(self, tabledef)

   Create indexes based on the table definition.



-------

.. _no-1368:

.. function:: dabo.db.dCursorMixin.dCursorMixin.createTable(self, tabledef)

   Create a table based on the table definition.



-------

.. _no-1369:

.. function:: dabo.db.dCursorMixin.dCursorMixin.createTableAndIndexes(self, tabledef)

   Create a table and its indexes based on the table definition.



-------

.. _no-1370:

.. function:: dabo.db.dCursorMixin.dCursorMixin.cursorToXML(self)

   
   Returns an XML string containing the information necessary to
   re-create this cursor.
   



-------

.. _no-1371:

.. function:: dabo.db.dCursorMixin.dCursorMixin.delete(self, delRowNum=None)

   Delete the specified row, or the currently active row.



-------

.. _no-1372:

.. function:: dabo.db.dCursorMixin.dCursorMixin.escQuote(self, val)

   Escape special characters in SQL strings.



-------

.. _no-1373:

.. function:: dabo.db.dCursorMixin.dCursorMixin.escape(self, val)

   Provides the proper escaping of values in XML output



-------

.. _no-1374:

.. function:: dabo.db.dCursorMixin.dCursorMixin.execute(self, sql, params=None, errorClass=None, convertQMarks=False)

   Execute the sql, and populate the DataSet if it is a select statement.



-------

.. _no-1375:

.. function:: dabo.db.dCursorMixin.dCursorMixin.executeSQL(self, \*args, \**kwargs)



-------

.. _no-1376:

.. function:: dabo.db.dCursorMixin.dCursorMixin.executeSafe(self, sql, params=None)

   
   Execute the passed SQL using an auxiliary cursor.
   This is considered 'safe', because it won't harm the contents
   of the main cursor. Returns the temp cursor.
   



-------

.. _no-1377:

.. function:: dabo.db.dCursorMixin.dCursorMixin.filter(self, fld, expr, op='=')

   Apply a filter to the current records.



-------

.. _no-1378:

.. function:: dabo.db.dCursorMixin.dCursorMixin.filterByExpression(self, expr)

   Allows you to filter by any valid Python expression.



-------

.. _no-1379:

.. function:: dabo.db.dCursorMixin.dCursorMixin.first(self)

   Move the record pointer to the first record of the data set.



-------

.. _no-1380:

.. function:: dabo.db.dCursorMixin.dCursorMixin.flush(self)

   
   Some backends need to be prompted to flush changes
   to disk even without starting a transaction. This is the method
   to call to accomplish this.
   



-------

.. _no-1381:

.. function:: dabo.db.dCursorMixin.dCursorMixin.formatBLOB(self, val)

   Format BLOB values for the backend



-------

.. _no-1382:

.. function:: dabo.db.dCursorMixin.dCursorMixin.formatDateTime(self, val)

   Format DateTime values for the backend



-------

.. _no-1383:

.. function:: dabo.db.dCursorMixin.dCursorMixin.formatNone(self)

   Format None values for the backend



-------

.. _no-1384:

.. function:: dabo.db.dCursorMixin.dCursorMixin.genTempAutoPK(self)

   
   Create a temporary PK for a new record. Set the key field to this
   value, and also create a temp field to hold it so that when saving the
   new record, child records that are linked to this one can be updated
   with the actual PK value.
   



-------

.. _no-1386:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getChangedRows(self, includeNewUnchanged=False)

   Returns a list of rows with changes.



-------

.. _no-1387:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getChildFilterClause(self)

   Get the child filter part of the sql statement.



-------

.. _no-1388:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getCurrentRecord(self)

   
   Returns the current record (as determined by self.RowNumber)
   as a dict, or None if the RowNumber is not a valid record.
   



-------

.. _no-1389:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getDataDiff(self, allRows=False)

   
   Create a compact representation of all the modified records
   for this cursor.
   



-------

.. _no-1390:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getDataSet(self, flds=(), rowStart=0, rows=None, returnInternals=False, _rowChangeCallback=None)

   
   Get the entire data set encapsulated in a dDataSet object.
   
   If the optional    'flds' parameter is given, the result set will be filtered
   to only include the specified fields. rowStart specifies the starting row
   to include, and rows is the number of rows to return.
   



-------

.. _no-1391:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getDataTypes(self)

   Returns the internal _types dict.



-------

.. _no-1392:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getFieldClause(self)

   Get the field clause of the sql statement.



-------

.. _no-1393:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getFieldInfoFromDescription(self)

   
   Get field information from the cursor description.
   
   Returns a tuple of 3-tuples, where the 3-tuple's elements are:
   
       | 0: the field name (string)
       | 1: the field type ('I', 'N', 'C', 'M', 'B', 'D', 'T'), or None.
       | 2: boolean specifying whether this is a pk field, or None.
   
   



-------

.. _no-1394:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getFieldVal(self, fld, row=None, _rowChangeCallback=None)

   Return the value of the specified field in the current or specified row.



-------

.. _no-1395:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getFields(self, tableName=None)

   
   Get field information about the backend table.
   
   Returns a list of 3-tuples, where the 3-tuple's elements are:
   
       | 0: the field name (string)
       | 1: the field type ('I', 'N', 'C', 'M', 'B', 'D', 'T')
       | 2: boolean specifying whether this is a pk field.
   
   



-------

.. _no-1396:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getFromClause(self)

   Get the from clause of the sql statement.



-------

.. _no-1397:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getGroupByClause(self)

   Get the group-by clause of the sql statement.



-------

.. _no-1398:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getJoinClause(self)

   Get the join clause of the sql statement.



-------

.. _no-1399:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getLastInsertID(self)

   Return the most recently generated PK



-------

.. _no-1400:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getLimit(self)

   Get the limit clause of the sql statement.



-------

.. _no-1401:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getLimitClause(self)

   Get the limit clause of the sql statement.



-------

.. _no-1402:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getLimitPosition(self)

   
   Return the position to place the limit clause.
   
   For currently-supported dbapi's, the return values of 'top' or 'bottom'
   are sufficient.
   



-------

.. _no-1403:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getLimitWord(self)

   Return the word to use in the db-specific limit clause.



-------

.. _no-1404:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getNonUpdateFields(self)



-------

.. _no-1405:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getOrderByClause(self)

   Get the order-by clause of the sql statement.



-------

.. _no-1406:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getPK(self, row=None)

   
   Returns the value of the PK field in the current or passed record number.
   If that record is a new unsaved record, return the temp PK value. If this is a
   compound PK, return a tuple containing each field's values.
   



-------

.. _no-1408:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getRecordStatus(self, row=None, pk=None)

   
   Returns a dictionary containing an element for each changed
   field in the specified record (or the current record if none is specified).
   The field name is the key for each element; the value is a 2-element
   tuple, with the first element being the original value, and the second
   being the current value. You can specify the record by either the
   row number or the PK.
   



-------

.. _no-1409:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getSQL(self, ignoreChildFilter=False)

   Get the complete SQL statement from all the parts.



-------

.. _no-1410:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getSortCase(self)



-------

.. _no-1411:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getSortColumn(self)



-------

.. _no-1412:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getSortOrder(self)



-------

.. _no-1413:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getStructureOnlySql(self)

   Creates a SQL statement that will not return any records.



-------

.. _no-1414:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getTableRecordCount(self, tableName)

   Get the number of records in the backend table.



-------

.. _no-1415:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getTables(self, includeSystemTables=False)

   Return a tuple of tables in the current database.



-------

.. _no-1416:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getWhereClause(self)

   Get the where clause of the sql statement.



-------

.. _no-1417:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getWordMatchFormat(self)



-------

.. _no-1418:

.. function:: dabo.db.dCursorMixin.dCursorMixin.hasPK(self, pk)

   Return True if the passed pk is present in the dataset.



-------

.. _no-1421:

.. function:: dabo.db.dCursorMixin.dCursorMixin.isChanged(self, allRows=True, includeNewUnchanged=False)

   
   Return True if there are any changes to the local field values.
   
   If allRows is True (the default), all records in the recordset will be
   considered. Otherwise, only the current record will be checked.
   
   If includeNewUnchanged is True, new records that have not been
   modified from their default values, which normally are not
   considered 'changed', will be counted as 'changed'.
   



-------

.. _no-1422:

.. function:: dabo.db.dCursorMixin.dCursorMixin.last(self)

   Move the record pointer to the last record in the recordset.



-------

.. _no-1423:

.. function:: dabo.db.dCursorMixin.dCursorMixin.locate(self, val, fld=None, caseSensitive=True, movePointer=True)

   
   Find the first row where the field value matches the passed value.
   
   Multiple fields can be searched by sending tuples as the val and fld arguments.
   
   Returns True or False, depending on whether a matching value was located.
   If 'fld' is not specified, the current sortColumn is used. If 'caseSensitive' is
   set to False, string comparisons are done in a case-insensitive fashion.
   
   This is very similar to the seek() method, with two main differences: there
   is no concept of a near-match; either the value is found or it isn't; the return
   value is a boolean indicating if the match was found, not the matching RowNumber.
   



-------

.. _no-1424:

.. function:: dabo.db.dCursorMixin.dCursorMixin.lookupPKWithAdd(self, field, val, tbl=None, pkCol=None)

   Runs a lookup in the specified field for the desired value. If
   found, returns the PK for that record. If not found, a record is
   inserted into the table, with its 'field' column populated with 'val',
   and the new PK is returned. None of this affects the current dataset.
   



-------

.. _no-1425:

.. function:: dabo.db.dCursorMixin.dCursorMixin.makePkWhere(self, row=None)

   
   Create the WHERE clause used for updates, based on the pk field.
   
   Optionally pass in a row number, otherwise use the current record.
   



-------

.. _no-1426:

.. function:: dabo.db.dCursorMixin.dCursorMixin.makeUpdClause(self, diff)

   
   Create the 'set field=val' section of the Update statement. Return a 2-tuple
   containing the sql portion as the first element, and the parameters for the
   values as the second.
   



-------

.. _no-1427:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmAddToBoth(self, thisField, thisVal, otherField, otherVal)

   
   Creates an association in a M-M relationship. If the relationship
   already exists, nothing changes. Otherwise, this will ensure that
   both values exist in their respective tables, and will create the
   entry in the association table.
   



-------

.. _no-1428:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmAssociateValue(self, otherField, otherVal)

   
   Associates the value in the 'other' table of a M-M relationship with the
   current record. If that value doesn't exist in the other table, it is added.
   



-------

.. _no-1429:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmAssociateValues(self, otherField, listOfValues)



-------

.. _no-1430:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmDissociateAll(self)

   
   Removes all associations between the current record and the associated
   M-M table.
   



-------

.. _no-1431:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmDissociateValue(self, otherField, otherVal)

   
   Removes the association between the current record and the specified value
   in the 'other' table of a M-M relationship. If no such association exists,
   nothing happens.
   



-------

.. _no-1432:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmDissociateValues(self, otherField, listOfValues)

   
   Removes the association between the current record and every item in 'listOfValues'
   in the 'other' table of a M-M relationship. If no such association exists,
   nothing happens.
   



-------

.. _no-1433:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmGetAssociatedValues(self, listOfFields)

   
   Returns a dataset containing the values for the specified fields
   in the records associated with the current record.
   



-------

.. _no-1434:

.. function:: dabo.db.dCursorMixin.dCursorMixin.mmSetFullAssociation(self, otherField, listOfValues)

   
   Adds and/or removes association records so that the current record
   is associated with every item in listOfValues, and none other.
   



-------

.. _no-1435:

.. function:: dabo.db.dCursorMixin.dCursorMixin.moveToPK(self, pk)

   
   Find the record with the passed primary key, and make it active.
   
   If the record is not found, the position is set to the first record.
   



-------

.. _no-1436:

.. function:: dabo.db.dCursorMixin.dCursorMixin.moveToRowNum(self, rownum)

   
   Move the record pointer to the specified row number.
   
   If the specified row does not exist, the pointer remains where it is,
   and an exception is raised.
   



-------

.. _no-1437:

.. function:: dabo.db.dCursorMixin.dCursorMixin.new(self)

   Add a new record to the data set.



-------

.. _no-1438:

.. function:: dabo.db.dCursorMixin.dCursorMixin.next(self)

   Move the record pointer forward one position in the recordset.



-------

.. _no-1439:

.. function:: dabo.db.dCursorMixin.dCursorMixin.oldVal(self, fieldName, row=None)

   Returns the value of the field as it existed after the last requery.



-------

.. _no-1440:

.. function:: dabo.db.dCursorMixin.dCursorMixin.pkExpression(self, rec=None)

   Returns the PK expression for the passed record.



-------

.. _no-1441:

.. function:: dabo.db.dCursorMixin.dCursorMixin.pkFieldExpression(self)

   
   Returns the field or comma-separated list of field names
   for the PK for this cursor's table.
   



-------

.. _no-1442:

.. function:: dabo.db.dCursorMixin.dCursorMixin.pregenPK(self)

   
   Various backend databases require that you manually
   generate new PKs if you need to refer to their values afterward.
   This method will call the backend to generate and
   retrieve a new PK if the backend supports this. We use the
   auxiliary cursor so as not to alter the current data.
   



-------

.. _no-1443:

.. function:: dabo.db.dCursorMixin.dCursorMixin.prepareWhere(self, clause)

   Modifies WHERE clauses as needed for each backend.



-------

.. _no-1444:

.. function:: dabo.db.dCursorMixin.dCursorMixin.prior(self)

   Move the record pointer back one position in the recordset.



-------

.. _no-1445:

.. function:: dabo.db.dCursorMixin.dCursorMixin.processFields(self, txt)



-------

.. _no-1447:

.. function:: dabo.db.dCursorMixin.dCursorMixin.removeField(self, exp, alias=None)

   Remove a previously added field from the field clause.



-------

.. _no-1448:

.. function:: dabo.db.dCursorMixin.dCursorMixin.removeFilter(self)

   Remove the most recently applied filter.



-------

.. _no-1449:

.. function:: dabo.db.dCursorMixin.dCursorMixin.removeFilters(self)

   Remove all applied filters, going back to the original data set.



-------

.. _no-1450:

.. function:: dabo.db.dCursorMixin.dCursorMixin.removeWhere(self, exp, comp='and')

   Remove an expression from the where clause.



-------

.. _no-1451:

.. function:: dabo.db.dCursorMixin.dCursorMixin.replace(self, field, valOrExpr, scope=None)

   
   Replaces the value of the specified field with the given value
   or expression. All records matching the scope are affected; if
   no scope is specified, all records are affected.
   
   'valOrExpr' will be treated as a literal value, unless it is prefixed
   with an equals sign. All expressions will therefore be a string
   beginning with '='. Literals can be of any type.
   
   .. note::
   
      This does NOT work with the memento framework for
      determining modified records. It is strongly recommended that
      instead of calling this directly that the bizobj.replace() method
      be used in any programming.
   
   



-------

.. _no-1452:

.. function:: dabo.db.dCursorMixin.dCursorMixin.requery(self, params=None, convertQMarks=False)



-------

.. _no-1453:

.. function:: dabo.db.dCursorMixin.dCursorMixin.rollbackTransaction(self)

   Roll back (revert) a SQL transaction.



-------

.. _no-1454:

.. function:: dabo.db.dCursorMixin.dCursorMixin.save(self, allRows=False, includeNewUnchanged=False)

   Save any changes to the current record back to the data store.



-------

.. _no-1455:

.. function:: dabo.db.dCursorMixin.dCursorMixin.seek(self, val, fld=None, caseSensitive=True, near=False, movePointer=True, sort=True, incremental=False)

   
   Find the first row where the field value  matches the passed value.
   
   Returns the row number of the first record that matches the passed
   value in the designated field, or -1 if there is no match. If 'near' is
   True, a match will happen on the row whose value is the greatest value
   that is less than the passed value. If 'caseSensitive' is set to False,
   string comparisons are done in a case-insensitive fashion.
   
   If sort is True (the default), then we seek to the first matching value
   without sorting first.
   
   If incremental is True (default is False), then we only compare the first
   characters up until the length of val.
   
   Multiple fields can be searched by sending tuples for the val and fld
   arguments.
   



-------

.. _no-1456:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setChildFilter(self, fld)

   This method sets the appropriate WHERE filter for dependent child queries.



-------

.. _no-1457:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setChildFilterClause(self, clause)

   Set the child filter clause of the sql statement.



-------

.. _no-1458:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setCursorFactory(self, func, cls)



-------

.. _no-1459:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setDataSet(self, ds)

   
   Set the records of the cursor to the passed dDataSet instance.
   
   Obviously, use with care. You can't get the original records back
   and this is really intended for one-off read-only cursors.
   



-------

.. _no-1460:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setDefaults(self, vals)

   
   Set the default field values for newly added records. The
   'vals' parameter is a dictionary of fields and their default values.
   If vals is None, the defaults for all but the KeyField will be set to
   None, and their values will not be included in the insert statement
   when saved unless the user changes them to some non-null
   value.
   



-------

.. _no-1461:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setFieldClause(self, clause)

   Set the field clause of the sql statement.



-------

.. _no-1462:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setFieldVal(self, fld, val, row=None, pk=None)

   Set the value of the specified field.



-------

.. _no-1463:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setFieldVals(self, valDict, row=None, pk=None)

   
   Set the value for multiple fields with one call by passing a dict containing
   the field names as keys, and the new values as values.
   



-------

.. _no-1464:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setFromClause(self, clause)

   Set the from clause of the sql statement.



-------

.. _no-1465:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setGroupByClause(self, clause)

   Set the group-by clause of the sql statement.



-------

.. _no-1466:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setJoinClause(self, clause)

   Set the join clause of the sql statement.



-------

.. _no-1467:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setLimit(self, clause)

   Set the limit clause of the sql statement.



-------

.. _no-1468:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setLimitClause(self, clause)

   Set the limit clause of the sql statement.



-------

.. _no-1469:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setNewFlag(self)

   
   Set the current record to be flagged as a new record.
   
   dBizobj will automatically call this method as appropriate, but if you are
   using dCursor without a proxy dBizobj, you'll need to manually call this
   method after cursor.new(), and (if applicable) after cursor.genTempAutoPK().
   
   For example::
   
       cursor.new()
       cursor.genTempAutoPK()
       cursor.setNewFlag()
   
   



-------

.. _no-1470:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setNonMatchChildFilterClause(self)

   
   Called when the parent has no records, which implies that the child
   cannot have any, either.
   



-------

.. _no-1471:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setNonUpdateFields(self, fldList=None)



-------

.. _no-1472:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setOrderByClause(self, clause)

   Set the order-by clause of the sql statement.



-------

.. _no-1475:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setValuesByDict(self, valDict, row=None, pk=None)

   
   Set the value for multiple fields with one call by passing a dict containing
   the field names as keys, and the new values as values.
   



-------

.. _no-1476:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setWhereClause(self, clause)

   Set the where clause of the sql statement.



-------

.. _no-1477:

.. function:: dabo.db.dCursorMixin.dCursorMixin.sort(self, col, ordr=None, caseSensitive=True)

   
   Sort the result set on the specified column in the specified order. If the sort
   direction is not specified, default to ascending order. If 'cycle' is specified as the
   direction, use the next ordering in the list [None, 'ASC', 'DESC']. The possible
   values for 'ordr' are:
   
       None
       "" (i.e., an empty string)
       ASC
       DESC
       CYCLE
   
   Only the first three characters are significant; case is ignored.
   



-------


Methods - inherited
=====================

.. _no-1353:

.. function:: dabo.db.dCursorMixin.dCursorMixin.afterInit(self)
   :noindex:


   
   Subclass hook. Called after the object's __init__ has run fully.
   Subclasses should place their __init__ code here in this hook, instead of
   overriding __init__ directly, to avoid conflicting with base Dabo behavior.
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1355:

.. function:: dabo.db.dCursorMixin.dCursorMixin.autoBindEvents(self, force=True)
   :noindex:


   
   Automatically bind any on*() methods to the associated event.
   
   User code only needs to define the callback, and Dabo will automatically
   set up the event binding. This will satisfy lots of common cases where
   you want an object or its parent to respond to the object's events.
   
   To use this feature, just define a method on<EventName>(), or    if you
   want a parent container to respond to the event, make a method in the
   parent on<EventName>_<object Name or RegID>().
   
   For example::
   
       class MyButton(dabo.ui.dButton):
           def onHit(self, evt):
               print "Hit!"
   
       class MyPanel(dabo.ui.dPanel):
           def afterInit(self):
               self.addObject(MyButton, RegID="btn1")
   
           def onHit_btn1(self, evt):
               print "panel: button hit!"
   
   When the button is pressed, you'll see both 'hit' messages because of
   auto event binding.
   
   If you want to bind your events explicitly, you can turn off auto event
   binding by issuing::
   
        dabo.autoBindEvents = False
   
   This feature is inspired by PythonCard.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-1356:

.. function:: dabo.db.dCursorMixin.dCursorMixin.beforeInit(self, \*args, \**kwargs)
   :noindex:


   
   Subclass hook. Called before the object is fully instantiated.
   Usually, user code should override afterInit() instead, but there may be
   cases where you need to set an attribute before the init stage is fully
   underway.
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1358:

.. function:: dabo.db.dCursorMixin.dCursorMixin.bindEvent(self, eventClass, function, _auto=False)
   :noindex:


   Bind a dEvent to a callback function.


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-1359:

.. function:: dabo.db.dCursorMixin.dCursorMixin.bindEvents(self, bindings)
   :noindex:


   Bind a sequence of [dEvent, callback] lists.


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-1385:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getAbsoluteName(self)
   :noindex:


   Return the fully qualified name of the object.


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1407:

.. function:: dabo.db.dCursorMixin.dCursorMixin.getProperties(self, propertySequence=(), propsToSkip=(), ignoreErrors=False, \*propertyArguments)
   :noindex:


   
   Returns a dictionary of property name/value pairs.
   
   If a sequence of properties is passed, just those property values
   will be returned. Otherwise, all property values will be returned.
   The sequence of properties can be a list, tuple, or plain string
   positional arguments. For instance, all of the following are
   equivilent::
   
       print self.getProperties("Caption", "FontInfo", "Form")
       print self.getProperties(["Caption", "FontInfo", "Form"])
       t = ("Caption", "FontInfo", "Form")
       print self.getProperties(t)
       print self.getProperties(\*t)
   
   An exception will be raised if any passed property names don't
   exist, aren't actual properties, or are not readable (do not have
   getter functions).
   
   However, if an exception is raised from the property getter function,
   the exception will get caught and used as the property value in the
   returned property dictionary. This allows the property list to be
   returned even if some properties can't be evaluated correctly by the
   object yet.
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-1419:

.. function:: dabo.db.dCursorMixin.dCursorMixin.initEvents(self)
   :noindex:


   
   Hook for subclasses. User code should do custom event binding
   here, such as::
   
       self.bindEvent(dEvents.GotFocus, self.customGotFocusHandler)
   
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1420:

.. function:: dabo.db.dCursorMixin.dCursorMixin.initProperties(self)
   :noindex:


   
   Hook for subclasses. User subclasses should set properties
   here, such as::
   
       self.Name = "MyTextBox"
       self.BackColor = (192,192,192)
   
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1446:

.. function:: dabo.db.dCursorMixin.dCursorMixin.raiseEvent(self, eventClass, uiEvent=None, \*args, \**kwargs)
   :noindex:


   
   Send the event to all registered listeners.
   
   If uiEvent is sent, dEvents.Event will be able to parse it for useful
   information to send along to the callback.
   
   Additional arguments, if any, are sent along to the constructor    of the
   event. While this feature exists so that UI-lib event handlers can pass
   along information (such as the keystroke information in a key event), user
   code may pass along additional arguments as well, which    will exist in the
   event.EventData dictionary property.
   
   In most cases, user code should call raiseEvent() with
   the event class (dEvents.Hit, for example) as the only parameter.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-1473:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setProperties(self, propDict={}, ignoreErrors=False, \**propKw)
   :noindex:


   
   Sets a group of properties on the object all at once.
   
   You have the following options for sending the properties:
   
       1) Property/Value pair dictionary
       2) Keyword arguments
       3) Both
   
   The following examples all do the same thing::
   
       self.setProperties(FontBold=True, ForeColor="Red")
       self.setProperties({"FontBold": True, "ForeColor": "Red"})
       self.setProperties({"FontBold": True}, ForeColor="Red")
   
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-1474:

.. function:: dabo.db.dCursorMixin.dCursorMixin.setPropertiesFromAtts(self, propDict={}, ignoreExtra=True, context=None)
   :noindex:


   
   Sets a group of properties on the object all at once. This
   is different from the regular setProperties() method because
   it only accepts a dict containing prop:value pairs, and it
   assumes that the value is always a string. It will convert
   the value to the correct type for the property, and then set
   the property to that converted value. If the value needs to be evaluated
   in a specific namespace, pass that as the 'context' parameter.
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-1478:

.. function:: dabo.db.dCursorMixin.dCursorMixin.super(self, \*args, \**kwargs)
   :noindex:


   This method used to call superclass code, but it's been removed.


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-1479:

.. function:: dabo.db.dCursorMixin.dCursorMixin.unbindEvent(self, eventClass=None, function=None)
   :noindex:


   
   Remove a previously registered event binding.
   
   Removes all registrations that exist for the given binding for this
   object. If event is None, all bindings for the passed function are
   removed. If function is None, all bindings for the passed event are
   removed. If both event and function are None, all event bindings are
   removed.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------


|
