
.. include:: _static/headings.txt

.. module:: dabo.lib.datanav.Bizobj

.. _dabo.lib.datanav.Bizobj.Bizobj:

======================================
|doc_title|  **Bizobj.Bizobj** - class
======================================



|hierarchy| Inheritance Diagram
===============================

Inheritance diagram for: **Bizobj**

.. inheritance-diagram:: Bizobj


|supclasses| Known Superclasses
===============================

* :ref:`dabo.biz.dBizobj.dBizobj`



|API| Class API
===============


.. autoclass:: dabo.lib.datanav.Bizobj.Bizobj


|method_summary| Properties Summary
===================================


========================================== ========================
:ref:`Application <no-6093>`               Read-only object reference to the Dabo Application object.  (dApp).
:ref:`AutoPopulatePK <no-6094>`            Determines if we are using a table that auto-generates its PKs. (bool)
:ref:`AutoQuoteNames <no-6095>`            When True (default), table and column names are enclosed with
:ref:`AutoSQL <no-6096>`                   Returns the SQL statement automatically generated by the sql manager.
:ref:`BackendTableFields <no-6097>`        Contains information for properly filling out the where clause.
:ref:`BaseClass <no-6098>`                 The base Dabo class of the object. Read-only.  (class)
:ref:`BasePrefKey <no-6099>`               Base key used when saving/restoring preferences  (str)
:ref:`BaseWhereClause <no-6100>`           A where-clause stub that will get prepended to whatever the user chooses.
:ref:`Caption <no-6101>`                   The friendly title of the cursor, used in messages to the end user. (str)
:ref:`CascadeDeleteFromParent <no-6102>`   Specifies whether deletion of the parent bizobj will cascade to delete all
:ref:`ChildCacheInterval <no-6103>`        If this is a child bizobj, this represents the length of time in seconds that a
:ref:`Class <no-6104>`                     The class the object is based on. Read-only.  (class)
:ref:`Connection <no-6105>`                The dConnection object used to connect with the backend database.
:ref:`CurrentSQL <no-6106>`                Returns the current SQL that will be run, which is one of UserSQL or AutoSQL.
:ref:`DataSource <no-6107>`                The title of the cursor. Used in resolving DataSource references. (str)
:ref:`DataSourceName <no-6108>`            If set, treated as cursor real table name where DataSource
:ref:`DataStructure <no-6109>`             Returns the structure of the cursor in a tuple of 6-tuples.
:ref:`DefaultValues <no-6110>`             A dictionary specifying default values for fields when a new record is added.
:ref:`Encoding <no-6111>`                  Name of encoding to use for unicode(str)
:ref:`FillLinkFromParent <no-6112>`        In the onNew() method, do we fill in the foreign key field specified by the
:ref:`IsAdding <no-6113>`                  Returns True if the current record is new and unsaved.
:ref:`KeyField <no-6114>`                  Name of field that is the PK. If multiple fields make up the key,
:ref:`LastSQL <no-6115>`                   Returns the last executed SQL statement.
:ref:`LinkField <no-6116>`                 Name of the field that is the foreign key back to the parent. (str)
:ref:`LogEvents <no-6117>`                 Specifies which events to log.  (list of strings)
:ref:`Name <no-6118>`                      The name of the object.  (str)
:ref:`NewChildOnNew <no-6119>`             Should new child records be added when a new parent record is added? (bool)
:ref:`NewRecordOnNewParent <no-6120>`      If this bizobj's parent has NewChildOnNew==True, do we create a record here? (bool)
:ref:`NonUpdateFields <no-6121>`           Fields in the cursor to be ignored during updates
:ref:`Parent <no-6122>`                    Reference to the parent bizobj to this one. (dBizobj)
:ref:`ParentLinkField <no-6123>`           Name of the field in the parent table that is used to determine child
:ref:`PreferenceManager <no-6124>`         Reference to the Preference Management object  (dPref)
:ref:`Record <no-6125>`                    Represents a record in the data set. You can address individual
:ref:`RequeryChildOnSave <no-6126>`        Do we requery child bizobjs after a save()? (bool)
:ref:`RequeryChildrenOnNavigate <no-6127>` Do we requery child bizobjs when navigating records? (bool)
:ref:`RequeryOnLoad <no-6128>`             When True, the cursor object runs its query immediately. This
:ref:`RequeryWithParent <no-6129>`         Specifies whether a child bizobj gets requeried automatically.
:ref:`RestorePositionOnRequery <no-6130>`  After a requery, do we try to restore the record position to the same PK?
:ref:`RowCount <no-6131>`                  The number of records in the cursor's data set. It will be -1 if the
:ref:`RowNumber <no-6132>`                 The current position of the record pointer in the result set. (int)
:ref:`SaveNewUnchanged <no-6133>`          Specifies whether new unchanged records are saved.  (bool; default:False)
:ref:`ScanRequeryChildren <no-6134>`       When calling the scan() function, this property determines if we
:ref:`ScanRestorePosition <no-6135>`       After running a scan, do we attempt to restore the record position to
:ref:`ScanReverse <no-6136>`               Do we scan the records in reverse order? (Default: False) (bool)
:ref:`SqlManager <no-6137>`                Reference to the cursor that handles SQL Builder information (cursor)
:ref:`UserSQL <no-6138>`                   SQL statement to run. If set, the automatic SQL builder will not be used.
:ref:`VirtualFields <no-6139>`             A dictionary mapping virtual_field_name to function to call.

========================================== ========================


Properties
==========

.. _no-6097:

**BackendTableFields** 

Contains information for properly filling out the where clause.

    If you have the following base sql:

    .. code-block:: sql

       select invoice.number as invoicenumber,
              customer.name as name
            from invoice
                inner join customer
                on customer.id = invoice.custid

    The where clause as generated using fieldSpecs will incorrectly
    do "WHERE invoice.invoicenumber = " or "WHERE invoice.name = "

    The BackendTableFields property tells it explicitly which table and
    field to use for a given fieldname::

        self.BackendTableFields["invoicenumber"] = ("invoice", "number")
        self.BackendTableFields["name"] = ("customer", "name")

    Note that you don't need to set this property if you call addField()
    with the standard explicit sql field clause, because it will happen
    automatically. In other words, the only thing your code really needs
    to do is to call self.addField()::

        self.addField("invoice.number as invoicenumber")
        self.addField("customer.name as name")

    



-------

.. _no-6100:

**BaseWhereClause** 

A where-clause stub that will get prepended to whatever the user chooses.



-------


Properties - inherited
========================

.. _no-6093:

**Application** 

Read-only object reference to the Dabo Application object.  (dApp).


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6094:

**AutoPopulatePK** 

Determines if we are using a table that auto-generates its PKs. (bool)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6095:

**AutoQuoteNames** 

When True (default), table and column names are enclosed with
    quotes during SQL creation in the cursor.  (bool)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6096:

**AutoSQL** 

Returns the SQL statement automatically generated by the sql manager.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6098:

**BaseClass** 

The base Dabo class of the object. Read-only.  (class)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6099:

**BasePrefKey** 

Base key used when saving/restoring preferences  (str)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6101:

**Caption** 

The friendly title of the cursor, used in messages to the end user. (str)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6102:

**CascadeDeleteFromParent** 

Specifies whether deletion of the parent bizobj will cascade to delete all
    linked child records.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6103:

**ChildCacheInterval** 

If this is a child bizobj, this represents the length of time in seconds that a
    requery from parent.requeryAllChildren() will be ignored.  (int)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6104:

**Class** 

The class the object is based on. Read-only.  (class)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6105:

**Connection** 

The dConnection object used to connect with the backend database.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6106:

**CurrentSQL** 

Returns the current SQL that will be run, which is one of UserSQL or AutoSQL.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6107:

**DataSource** 

The title of the cursor. Used in resolving DataSource references. (str)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6108:

**DataSourceName** 

If set, treated as cursor real table name where DataSource
    is an alias for it. This allows coexistence of many business objects
    with same data source on single form. (str)

    Example:
        class StockBase(dBizobj):
            def initProperties(self):
                self.DataSourceName = "stock"

        class StockHigh(StockBase):
            def initProperties(self):
                self.DataSource = "stock_high"

        class StockLow(StockBase):
            def initProperties(self):
                self.DataSource = "stock_low"
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6109:

**DataStructure** 

Returns the structure of the cursor in a tuple of 6-tuples.

        | 0: field alias (str)
        | 1: data type code (str)
        | 2: pk field (bool)
        | 3: table name (str)
        | 4: field name (str)
        | 5: field scale for numeric, display size for character
            type fields (int or None)

        This information will try to come from a few places, in order:

        1. The explicitly-set DataStructure property
        2. The backend table method
        


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6110:

**DefaultValues** 

A dictionary specifying default values for fields when a new record is added.

    The values of the dictionary can be literal (must match the field type), or
    they can be a function object which will be called when the new record is added
    to the bizobj.
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6111:

**Encoding** 

Name of encoding to use for unicode(str)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6112:

**FillLinkFromParent** 

In the onNew() method, do we fill in the foreign key field specified by the
    LinkField property with the value returned by calling the bizobj's    getParentPK()
    method? (bool)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6113:

**IsAdding** 

Returns True if the current record is new and unsaved.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6114:

**KeyField** 

Name of field that is the PK. If multiple fields make up the key,
    separate the fields with commas. (str)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6115:

**LastSQL** 

Returns the last executed SQL statement.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6116:

**LinkField** 

Name of the field that is the foreign key back to the parent. (str)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6117:

**LogEvents** 


    Specifies which events to log.  (list of strings)

    If the first element is 'All', all events except the following listed events
    will be logged.
    Event logging is resource-intensive, so in addition to setting this LogEvents
    property, you also need to make the following call:

        >>> dabo.eventLogging = True

    


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6118:

**Name** 

The name of the object.  (str)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6119:

**NewChildOnNew** 

Should new child records be added when a new parent record is added? (bool)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6120:

**NewRecordOnNewParent** 

If this bizobj's parent has NewChildOnNew==True, do we create a record here? (bool)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6121:

**NonUpdateFields** 

Fields in the cursor to be ignored during updates


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6122:

**Parent** 

Reference to the parent bizobj to this one. (dBizobj)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6123:

**ParentLinkField** 

Name of the field in the parent table that is used to determine child
    records. If empty, it is assumed that the parent's PK is used  (str)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6124:

**PreferenceManager** 

Reference to the Preference Management object  (dPref)


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6125:

**Record** 

Represents a record in the data set. You can address individual
    columns by referring to 'self.Record.fieldName' (read-only) (no type)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6126:

**RequeryChildOnSave** 

Do we requery child bizobjs after a save()? (bool)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6127:

**RequeryChildrenOnNavigate** 

Do we requery child bizobjs when navigating records? (bool)

    Usually, you want to automatically requery children when the parent
    RowNumber changes. However, there may be cases when you want to do
    that requery manually at the proper time instead for performance
    reasons.

    Setting this property to False will keep requeryAllChildren() from
    automatically running after RowNumber changes.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6128:

**RequeryOnLoad** 

When True, the cursor object runs its query immediately. This
    is useful for lookup tables or fixed-size (small) tables. (bool)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6129:

**RequeryWithParent** 

Specifies whether a child bizobj gets requeried automatically.

    When True (the default) moving the record pointer or requerying the
    parent bizobj will result in the child bizobj's getting requeried
    as well. When False, user code will have to manually call
    child.requery() at the appropriate time.
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6130:

**RestorePositionOnRequery** 

After a requery, do we try to restore the record position to the same PK?


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6131:

**RowCount** 

The number of records in the cursor's data set. It will be -1 if the
    cursor hasn't run any successful queries yet. (int)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6132:

**RowNumber** 

The current position of the record pointer in the result set. (int)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6133:

**SaveNewUnchanged** 

Specifies whether new unchanged records are saved.  (bool; default:False)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6134:

**ScanRequeryChildren** 

When calling the scan() function, this property determines if we
    requery any child bizobjs for each row in this bizobj. The default is False,
    as this has the potential to cause performance issues.    (bool)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6135:

**ScanRestorePosition** 

After running a scan, do we attempt to restore the record position to
    where it was before the scan (True, default), or do we leave the pointer
    at the end of the recordset (False). (bool)
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6136:

**ScanReverse** 

Do we scan the records in reverse order? (Default: False) (bool)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6137:

**SqlManager** 

Reference to the cursor that handles SQL Builder information (cursor)


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6138:

**UserSQL** 

SQL statement to run. If set, the automatic SQL builder will not be used.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6139:

**VirtualFields** 

A dictionary mapping virtual_field_name to function to call.

    The specified function will be called when getFieldVal() is called on
    the specified virtual field name.
    


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------


|method_summary| Events Summary
===============================


============================== ========================
:ref:`DataEvent <no-6140>`     
:ref:`RowNavigation <no-6141>` Occurs when the PrimaryBizobj of the dForm is being navigated.
:ref:`RowNumChanged <no-6142>` Occurs when the RowNumber of the PrimaryBizobj of the dForm has changed.

============================== ========================


Events
=======

.. _no-6140:

**DataEvent** 



-------

.. _no-6141:

**RowNavigation** 

Occurs when the PrimaryBizobj of the dForm is being navigated.

As the user is rapidly calling dForm.next(), .prior(), etc., RowNavigation
events get raised. Your code should do some quick display updates to indicate
to the user that the record is changing, but the child bizobj's won't be
requeried until after the navigation has ended.

See also RowNumChanged, which only occurs after the user has settled on a
record and has stopped navigating.




-------

.. _no-6142:

**RowNumChanged** 

Occurs when the RowNumber of the PrimaryBizobj of the dForm has changed.



-------


|method_summary| Methods Summary
================================


================================================ ========================
:ref:`addChild <no-6143>`                        Add the passed child bizobj to this bizobj.
:ref:`addField <no-6144>`                        
:ref:`addFrom <no-6145>`                         Add a table to the sql statement. For 1-M joins, use
:ref:`addGroupBy <no-6146>`                      Add an expression to the group-by clause.
:ref:`addJoin <no-6147>`                         Add SQL JOIN clause.
:ref:`addMMBizobj <no-6148>`                     Add the passed bizobj to this bizobj in a Many-to-Many relationship.
:ref:`addOrderBy <no-6149>`                      Add an expression to the order-by clause.
:ref:`addWhere <no-6150>`                        Add a filter expression to the where clause.
:ref:`afterCancel <no-6151>`                     Hook method called after the changed records are canceled..
:ref:`afterChange <no-6152>`                     Hook method called after a record is changed.
:ref:`afterChildRequery <no-6153>`               Hook method called after the child bizobjs are requeried.
:ref:`afterCreateCursor <no-6154>`               This hook is called after the underlying cursor object is created.
:ref:`afterDelete <no-6155>`                     Hook method called after a record is deleted.
:ref:`afterDeleteAllChildren <no-6156>`          Hook method called after all child records are deleted.
:ref:`afterFirst <no-6157>`                      Hook method called after navigating to the next record.
:ref:`afterInit <no-6158>`                       Subclass hook. Called after the object's __init__ has run fully.
:ref:`afterLast <no-6159>`                       Hook method called after navigating to the last record.
:ref:`afterNew <no-6160>`                        Hook method called after a new record is added.
:ref:`afterNext <no-6161>`                       Hook method called after navigating to the next record.
:ref:`afterPointerMove <no-6162>`                Hook method called after the record pointer moves.
:ref:`afterPrior <no-6163>`                      Hook method called after navigating to the prior record.
:ref:`afterRequery <no-6164>`                    Hook method called after the cursor is requeried.
:ref:`afterSave <no-6165>`                       Hook method called after the current record is saved..
:ref:`afterSaveAll <no-6166>`                    Hook method called after all the the changed records are saved..
:ref:`afterSetCurrentParent <no-6167>`           Hook method called after the parent cursor changes.
:ref:`afterSetFieldVal <no-6168>`                Hook method called after a field's value has been set.
:ref:`afterSetRowNumber <no-6169>`               Hook method called after the RowNumber property is set.
:ref:`appendDataSet <no-6170>`                   Appends the rows in the passed dataset to this bizobj's dataset. No checking
:ref:`autoBindEvents <no-6171>`                  Automatically bind any on*() methods to the associated event.
:ref:`beforeCancel <no-6172>`                    Hook method called before the changed records are canceled..
:ref:`beforeChildRequery <no-6173>`              Hook method called before the child bizobjs are requeried.
:ref:`beforeCreateCursor <no-6174>`              Hook method called before the underlying cursor object is created.
:ref:`beforeDelete <no-6175>`                    Hook method called before a record is deleted.
:ref:`beforeDeleteAllChildren <no-6176>`         Hook method called before all child records are deleted.
:ref:`beforeFirst <no-6177>`                     Hook method called before navigating to the next record.
:ref:`beforeInit <no-6178>`                      Subclass hook. Called before the object is fully instantiated.
:ref:`beforeLast <no-6179>`                      Hook method called before navigating to the last record.
:ref:`beforeNew <no-6180>`                       Hook method called before a new record is added.
:ref:`beforeNext <no-6181>`                      Hook method called before navigating to the next record.
:ref:`beforePointerMove <no-6182>`               Hook method called before the record pointer moves.
:ref:`beforePrior <no-6183>`                     Hook method called before navigating to the prior record.
:ref:`beforeRequery <no-6184>`                   Hook method called before the cursor is requeried.
:ref:`beforeSave <no-6185>`                      Hook method called before the current record is saved..
:ref:`beforeSaveAll <no-6186>`                   Hook method called before all the changed records are saved..
:ref:`beforeSetRowNumber <no-6187>`              Hook method called before the RowNumber property is set.
:ref:`beginTransaction <no-6188>`                Attempts to begin a transaction at the database level, and returns
:ref:`bindEvent <no-6189>`                       Bind a dEvent to a callback function.
:ref:`bindEvents <no-6190>`                      Bind a sequence of [dEvent, callback] lists.
:ref:`bizDataIterator <no-6191>`                 Returns an iterator that moves the bizobj's record pointer from
:ref:`bizIterator <no-6192>`                     Returns an iterator that moves the bizobj's record pointer from
:ref:`cacheExpired <no-6193>`                    This controls if a child requery is needed when a parent is requeried.
:ref:`cancel <no-6194>`                          Cancel all changes to the current record and by default all children.
:ref:`cancelAll <no-6195>`                       Cancel all changes made in all rows, including by default all children
:ref:`clear <no-6196>`                           Clear all cursors and records from self and children.
:ref:`cloneRecord <no-6197>`                     Creates a copy of the current record and adds it to the dataset. The KeyField
:ref:`commitTransaction <no-6198>`               Attempts to commit a transaction at the database level, and returns
:ref:`createAssociation <no-6199>`               Create a many-to-many association. Generally it is better to use the 'addMMBizobj()'
:ref:`createCursor <no-6200>`                    Create the cursor that this bizobj will be using for data, and optionally store it
:ref:`dataToXML <no-6201>`                       Returns XML representing the data set. If there are child bizobjs,
:ref:`delete <no-6202>`                          Delete the current row of the data set.
:ref:`deleteAll <no-6203>`                       Delete all rows in the data set.
:ref:`deleteAllChildren <no-6204>`               Delete all children associated with the current record without
:ref:`escQuote <no-6205>`                        Escape special characters in SQL strings.
:ref:`execute <no-6206>`                         Execute the sql on the cursor. Dangerous. Use executeSafe instead.
:ref:`executeSafe <no-6207>`                     Execute the passed SQL using an auxiliary cursor.
:ref:`expireCache <no-6208>`                     Expire the requery cache so that a subsequent self.Parent.requeryAllChildren()
:ref:`fieldValidation <no-6209>`                 This is called by the form when a control that is marked for field-
:ref:`filter <no-6210>`                          This takes a field name, an expression, and an optional operator, and applies that
:ref:`filterByExpression <no-6211>`              Allows you to filter by any valid Python expression.
:ref:`first <no-6212>`                           Move to the first record of the data set.
:ref:`formatDateTime <no-6213>`                  Wrap a date or date-time value in the format
:ref:`formatForQuery <no-6214>`                  Wrap up any value(int, long, string, date, date-time, decimal, none)
:ref:`getAbsoluteName <no-6215>`                 Return the fully qualified name of the object.
:ref:`getAncestorByDataSource <no-6216>`         Given a DataSource, finds the ancestor (parent, grandparent, etc.) of
:ref:`getBaseWhereClause <no-6217>`              Subclasses can return a where clause stub that will always exist,
:ref:`getChangedRows <no-6218>`                  Returns a list of row numbers for which isChanged() returns True. The
:ref:`getChangedStatus <no-6219>`                Returns a dictionary of bizobj references and the results of
:ref:`getChildByDataSource <no-6220>`            Return a reference to the child bizobj with the passed dataSource.
:ref:`getChildren <no-6221>`                     Return a tuple of the child bizobjs.
:ref:`getDataDiff <no-6222>`                     Get a dict that is keyed on the hash value of this bizobj, with the value
:ref:`getDataSet <no-6223>`                      Get the entire data set encapsulated in a list.
:ref:`getDataStructure <no-6224>`                Gets the structure of the DataSource table. Returns a list
:ref:`getDataStructureFromDescription <no-6225>` Gets the structure of the DataSource table. Returns a list
:ref:`getDataTypeForField <no-6226>`             Given a field name, returns its Python type, or None if no
:ref:`getDataTypes <no-6227>`                    Returns the field type definitions as set in the cursor.
:ref:`getFieldClause <no-6228>`                  Returns the current field clause set in the backend.
:ref:`getFieldNames <no-6229>`                   Returns a tuple of all the field names in the cursor.
:ref:`getFieldVal <no-6230>`                     Return the value of the specified field in the current or specified row.
:ref:`getFieldVals <no-6231>`                    Return a dict of the field/value pairs in the current or specified row.
:ref:`getFromClause <no-6232>`                   Returns the current from clause set in the backend.
:ref:`getGroupByClause <no-6233>`                Returns the current group-by clause set in the backend.
:ref:`getJoinClause <no-6234>`                   Returns the current join clause set in the backend.
:ref:`getLimit <no-6235>`                        Returns the current limit clause set in the backend.
:ref:`getLimitClause <no-6236>`                  Returns the current limit clause set in the backend.
:ref:`getOrderByClause <no-6237>`                Returns the current order-by clause set in the backend.
:ref:`getPK <no-6238>`                           Return the value of the PK field.
:ref:`getParams <no-6239>`                       Return the parameters to send to the cursor's execute method.
:ref:`getParentLinkValue <no-6240>`              Return the value of the parent record on which this bizobj is dependent. Usually this
:ref:`getParentPK <no-6241>`                     Return the value of the parent bizobjs' PK field. Alternatively,
:ref:`getPrecisionForField <no-6242>`            Given a field name, return the decimal precision, or None.
:ref:`getProperties <no-6243>`                   Returns a dictionary of property name/value pairs.
:ref:`getRecordStatus <no-6244>`                 Returns a dictionary containing an element for each changed
:ref:`getSQL <no-6245>`                          Returns the SQL statement currently set in the backend.
:ref:`getTempCursor <no-6246>`                   Occasionally it is useful to be able to run ad-hoc queries against
:ref:`getWhereClause <no-6247>`                  Returns the current where clause set in the backend.
:ref:`getWordMatchFormat <no-6248>`              Returns the backend's SQL format for creating queries that are based
:ref:`hasPK <no-6249>`                           Return True if the passed PK value is present in the dataset.
:ref:`initEvents <no-6250>`                      Hook for subclasses. User code should do custom event binding
:ref:`initProperties <no-6251>`                  Hook for subclasses. User subclasses should set properties
:ref:`isAnyChanged <no-6252>`                    Return True if at least one record in the current record set
:ref:`isChanged <no-6253>`                       Return True if data has changed in this bizobj and any children.
:ref:`isRemote <no-6254>`                        Returns True/False, depending on whether this bizobj's connection
:ref:`isRowChanged <no-6255>`                    Return True if data has changed in the current row
:ref:`last <no-6256>`                            Move to the last record of the data set.
:ref:`locate <no-6257>`                          Search for a value in a field, and optionally move the record pointer to the first
:ref:`lookupPKWithAdd <no-6258>`                 Runs a lookup in the specified field for the desired value. If
:ref:`mmAddToBoth <no-6259>`                     Creates an association in a M-M relationship. If the relationship
:ref:`mmAssociateValue <no-6260>`                Associates the value in the 'other' table of a M-M relationship with the
:ref:`mmAssociateValues <no-6261>`               Adds association records so that the current record in this bizobj is associated
:ref:`mmDissociateAll <no-6262>`                 Removes all associations between the current record and the associated
:ref:`mmDissociateValue <no-6263>`               Removes the association between the current record and the specified value
:ref:`mmDissociateValues <no-6264>`              Removes the association between the current record and every item in 'listOfValues'
:ref:`mmGetAssociatedValues <no-6265>`           Given a relationship, returns the values associated with the current
:ref:`mmSetFullAssociation <no-6266>`            Adds and/or removes association records so that the current record in this
:ref:`moveToPK <no-6267>`                        Move to the row with the specified pk value, or raise RowNotFoundException.
:ref:`moveToRowNumber <no-6268>`                 Move to the specified row number.
:ref:`new <no-6269>`                             Create a new record and populate it with default values. Default
:ref:`next <no-6270>`                            Move to the next record of the data set.
:ref:`oldVal <no-6271>`                          Returns the value that was in the specified field when it was last fetched
:ref:`onDeleteLastRecord <no-6272>`              Hook called when the last record has been deleted from the data set.
:ref:`onNew <no-6273>`                           Called when a new record is added.
:ref:`onSaveNew <no-6274>`                       Hook method called after successfully saving a new record.
:ref:`prepareWhere <no-6275>`                    Calls the backend's pre-processing routine for improving efficiency
:ref:`prior <no-6276>`                           Move to the prior record of the data set.
:ref:`raiseEvent <no-6277>`                      Send the event to all registered listeners.
:ref:`removeAllChildren <no-6278>`               Remove all child bizobjs.
:ref:`removeChild <no-6279>`                     Remove the passed child bizobj from this bizobj.
:ref:`removeField <no-6280>`                     Remove a previously added field from the field clause.
:ref:`removeFilter <no-6281>`                    Remove the most recently applied filter.
:ref:`removeFilters <no-6282>`                   Remove all applied filters, going back to the original data set.
:ref:`removeMMBizobj <no-6283>`                  Removes the specified bizobj from a Many-to-Many relationship. If no such
:ref:`removeWhere <no-6284>`                     Remove a previously-added filter expression from the where clause.
:ref:`replace <no-6285>`                         Replaces the value of the specified field with the given value
:ref:`requery <no-6286>`                         Requery the data set.
:ref:`requeryAllChildren <no-6287>`              Requery each child bizobj's data set.
:ref:`rollbackTransaction <no-6288>`             Attempts to rollback a transaction at the database level, and returns
:ref:`save <no-6289>`                            Save any changes that have been made in the current row.
:ref:`saveAll <no-6290>`                         Save changes to all rows in the bizobj, and (by default) the children.
:ref:`scan <no-6291>`                            Iterate over all records and apply the passed function to each.
:ref:`scanChangedRows <no-6292>`                 Move the record pointer to each changed row, and call func.
:ref:`scanKeys <no-6293>`                        Iterate over the specified keys (defined in KeyField) and apply
:ref:`scanRows <no-6294>`                        Iterate over the specified rows and apply the passed function to each.
:ref:`scanVirtualFields <no-6295>`               
:ref:`seek <no-6296>`                            Search for a value in a field, and move the record pointer to the match.
:ref:`setChildLinkFilter <no-6297>`              If this is a child bizobj, its record set is dependent on its parent's
:ref:`setConnection <no-6298>`                   Normally connections are established before bizobj creation, but
:ref:`setCurrentParent <no-6299>`                Lets dependent child bizobjs update to the current parent
:ref:`setFieldClause <no-6300>`                  Explicitly set the field clause. Replaces any existing field settings.
:ref:`setFieldVal <no-6301>`                     Set the value of the specified field in the current or specified row.
:ref:`setFieldVals <no-6302>`                    Allows you to set the value for multiple fields with one call by passing a dict
:ref:`setFromClause <no-6303>`                   Explicitly set the from clause. Replaces any existing from settings.
:ref:`setGroupByClause <no-6304>`                Explicitly set the group-by clause. Replaces any existing group-by settings.
:ref:`setJoinClause <no-6305>`                   Explicitly set the join clauses. Replaces any existing join settings.
:ref:`setLimit <no-6306>`                        Explicitly set the limit clause. Replaces any existing limit settings.
:ref:`setLimitClause <no-6307>`                  Explicitly set the limit clause. Replaces any existing limit settings.
:ref:`setOrderByClause <no-6308>`                Explicitly set the order-by clause. Replaces any existing order-by settings.
:ref:`setParams <no-6309>`                       Set the query parameters for the cursor.
:ref:`setParentFK <no-6310>`                     Accepts and sets the foreign key value linking to the
:ref:`setProperties <no-6311>`                   Sets a group of properties on the object all at once.
:ref:`setPropertiesFromAtts <no-6312>`           Sets a group of properties on the object all at once. This
:ref:`setSQL <no-6313>`                          Set the SQL query that will be executed upon requery().
:ref:`setValues <no-6314>`                       
:ref:`setWhereClause <no-6315>`                  Explicitly set the where clause. Replaces any existing where settings.
:ref:`sort <no-6316>`                            Sort the rows based on values in a specified column.
:ref:`super <no-6317>`                           This method used to call superclass code, but it's been removed.
:ref:`unbindEvent <no-6318>`                     Remove a previously registered event binding.
:ref:`validateField <no-6319>`                   This is the method to override if you need field-level validation
:ref:`validateRecord <no-6320>`                  Hook for subclass business rule validation code.

================================================ ========================


Methods
=======

.. _no-6144:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addField(self, fld)



-------

.. _no-6217:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getBaseWhereClause(self)

   
   Subclasses can return a where clause stub that will always exist,
   no matter what the user selects on the select page. For instance:
   
       return "clients.ldeleted = 0 and invoices.ldeleted=0"
   
   Don't include the word "where": that'll be added automatically later.
   



-------


Methods - inherited
=====================

.. _no-6143:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addChild(self, child)
   :noindex:


   
   Add the passed child bizobj to this bizobj.
   
   Child bizobjs stay in sync with their parent, getting requeried at the
   appropriate times.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6145:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addFrom(self, exp, alias=None)
   :noindex:


   
   Add a table to the sql statement. For 1-M joins, use
   the addJoin() method. For M-M joins, use the
   createAssociation() method.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6146:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addGroupBy(self, exp)
   :noindex:


   Add an expression to the group-by clause.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6147:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addJoin(self, tbl, exp, joinType=None)
   :noindex:


   
   Add SQL JOIN clause.
   
   :param tbl: the name of the table to join with
   :param exp: the join expression
   :param joinType: examples: "LEFT", "RIGHT", "INNER", "OUTER"
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6148:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addMMBizobj(self, mmBizobj, assocTable, assocPKColThis, assocPKColOther, mmPkCol=None)
   :noindex:


   
   Add the passed bizobj to this bizobj in a Many-to-Many relationship.
   
   The reference will be stored, and the Parent reference of that bizobj
   will be set to this. If mmPkCol is not specified, the KeyField for the mmBizobj
   will be used for the relationship.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6149:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addOrderBy(self, exp)
   :noindex:


   Add an expression to the order-by clause.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6150:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.addWhere(self, exp, comp='and')
   :noindex:


   Add a filter expression to the where clause.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6151:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterCancel(self)
   :noindex:


   Hook method called after the changed records are canceled..
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6152:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterChange(self)
   :noindex:


   Hook method called after a record is changed.
   
   This hook will be called after a successful save() or delete(). Contrast
   with the afterSave() hook which only gets called after a save(), and the
   afterDelete() which is only called after a delete().


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6153:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterChildRequery(self)
   :noindex:


   Hook method called after the child bizobjs are requeried.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6154:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterCreateCursor(self, crs)
   :noindex:


   
   This hook is called after the underlying cursor object is created.
   The crs argument will contain the reference to the newly-created
   cursor.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6155:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterDelete(self)
   :noindex:


   Hook method called after a record is deleted.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6156:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterDeleteAllChildren(self)
   :noindex:


   Hook method called after all child records are deleted.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6157:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterFirst(self)
   :noindex:


   Hook method called after navigating to the next record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6158:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterInit(self)
   :noindex:


   
   Subclass hook. Called after the object's __init__ has run fully.
   Subclasses should place their __init__ code here in this hook, instead of
   overriding __init__ directly, to avoid conflicting with base Dabo behavior.
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6159:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterLast(self)
   :noindex:


   Hook method called after navigating to the last record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6160:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterNew(self)
   :noindex:


   Hook method called after a new record is added.
   
   Use this hook to change field values of newly added records. If
   you change field values here, the memento system will catch it and
   prompt you to save if needed later on. If you want to change field
   values and not trigger the memento system, override onNew() instead.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6161:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterNext(self)
   :noindex:


   Hook method called after navigating to the next record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6162:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterPointerMove(self)
   :noindex:


   Hook method called after the record pointer moves.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6163:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterPrior(self)
   :noindex:


   Hook method called after navigating to the prior record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6164:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterRequery(self)
   :noindex:


   Hook method called after the cursor is requeried.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6165:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterSave(self)
   :noindex:


   Hook method called after the current record is saved..
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6166:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterSaveAll(self)
   :noindex:


   Hook method called after all the the changed records are saved..
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6167:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterSetCurrentParent(self)
   :noindex:


   Hook method called after the parent cursor changes.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6168:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterSetFieldVal(self, fld, row)
   :noindex:


   
   Hook method called after a field's value has been set.
   
   Your hook method needs to accept two arguments:
   
       | -> fld : The name of the changed field.
       | -> row : The RowNumber of the changed field.
   
   If row is None, this is the common case of the change happening
   in the current row.
   
   Note that this hook will only fire if the new field value is different
   from the old.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6169:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.afterSetRowNumber(self)
   :noindex:


   Hook method called after the RowNumber property is set.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6170:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.appendDataSet(self, ds, updateInternals=False)
   :noindex:


   
   Appends the rows in the passed dataset to this bizobj's dataset. No checking
   is done on the dataset columns to make sure that they are correct for this bizobj;
   it is the responsibility of the caller to make sure that they match. If invalid data is
   passed, a dException.FieldNotFoundException will be raised.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6171:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.autoBindEvents(self, force=True)
   :noindex:


   
   Automatically bind any on*() methods to the associated event.
   
   User code only needs to define the callback, and Dabo will automatically
   set up the event binding. This will satisfy lots of common cases where
   you want an object or its parent to respond to the object's events.
   
   To use this feature, just define a method on<EventName>(), or    if you
   want a parent container to respond to the event, make a method in the
   parent on<EventName>_<object Name or RegID>().
   
   For example::
   
       class MyButton(dabo.ui.dButton):
           def onHit(self, evt):
               print "Hit!"
   
       class MyPanel(dabo.ui.dPanel):
           def afterInit(self):
               self.addObject(MyButton, RegID="btn1")
   
           def onHit_btn1(self, evt):
               print "panel: button hit!"
   
   When the button is pressed, you'll see both 'hit' messages because of
   auto event binding.
   
   If you want to bind your events explicitly, you can turn off auto event
   binding by issuing::
   
        dabo.autoBindEvents = False
   
   This feature is inspired by PythonCard.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-6172:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeCancel(self)
   :noindex:


   Hook method called before the changed records are canceled..
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6173:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeChildRequery(self)
   :noindex:


   Hook method called before the child bizobjs are requeried.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6174:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeCreateCursor(self)
   :noindex:


   Hook method called before the underlying cursor object is created.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6175:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeDelete(self)
   :noindex:


   Hook method called before a record is deleted.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6176:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeDeleteAllChildren(self)
   :noindex:


   Hook method called before all child records are deleted.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6177:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeFirst(self)
   :noindex:


   Hook method called before navigating to the next record.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6178:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeInit(self, \*args, \**kwargs)
   :noindex:


   
   Subclass hook. Called before the object is fully instantiated.
   Usually, user code should override afterInit() instead, but there may be
   cases where you need to set an attribute before the init stage is fully
   underway.
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6179:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeLast(self)
   :noindex:


   Hook method called before navigating to the last record.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6180:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeNew(self)
   :noindex:


   Hook method called before a new record is added.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6181:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeNext(self)
   :noindex:


   Hook method called before navigating to the next record.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6182:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforePointerMove(self)
   :noindex:


   Hook method called before the record pointer moves.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6183:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforePrior(self)
   :noindex:


   Hook method called before navigating to the prior record.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6184:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeRequery(self)
   :noindex:


   Hook method called before the cursor is requeried.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6185:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeSave(self)
   :noindex:


   Hook method called before the current record is saved..
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6186:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeSaveAll(self)
   :noindex:


   Hook method called before all the changed records are saved..
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6187:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beforeSetRowNumber(self)
   :noindex:


   Hook method called before the RowNumber property is set.
   
   Subclasses can put in additional code to run, and/or return a non-empty
   string to signify that the action should not happen. The contents
   of the string will be displayed to the user.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6188:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.beginTransaction(self, crs=None)
   :noindex:


   
   Attempts to begin a transaction at the database level, and returns
   True/False depending on its success.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6189:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.bindEvent(self, eventClass, function, _auto=False)
   :noindex:


   Bind a dEvent to a callback function.


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-6190:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.bindEvents(self, bindings)
   :noindex:


   Bind a sequence of [dEvent, callback] lists.


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-6191:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.bizDataIterator(self, reversed=False, restorePointer=False, flushUnchangedCursors=False)
   :noindex:


   
   Returns an iterator that moves the bizobj's record pointer from
   the first record to the last, and returns a dict of the columns/values
   of the record for the current iteration. If you pass 'reversed=True',
   the iterator will go in reverse order, from the last record to the first.
   
   
   Note that the bizobj will remain on the last (or first, if reverse()
   is True) record after the iteration is complete unless you call this
   with restorePointer=True.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6192:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.bizIterator(self, reversed=False, restorePointer=False, flushUnchangedCursors=False)
   :noindex:


   
   Returns an iterator that moves the bizobj's record pointer from
   the first record to the last, and returns the current record number.
   If you pass 'reversed=True', the iterator will go in reverse order,
   from the last record to the first.
   
   Note that the bizobj will remain on the last (or first, if reverse()
   is True) record after the iteration is complete unless you call this
   with restorePointer=True.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6193:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.cacheExpired(self)
   :noindex:


   This controls if a child requery is needed when a parent is requeried.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6194:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.cancel(self, ignoreNoRecords=None, cancelTheChildren=True)
   :noindex:


   
   Cancel all changes to the current record and by default all children.
   
   Two hook methods will be called: beforeCancel() and afterCancel(). The
   former, if it returns an error message, will raise an exception and not
   continue cancelling the record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6195:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.cancelAll(self, ignoreNoRecords=None, cancelTheChildren=True)
   :noindex:


   
   Cancel all changes made in all rows, including by default all children
   and all new, unmodified records.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6196:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.clear(self, confirmed=False)
   :noindex:


   
   Clear all cursors and records from self and children.
   
   Use this when adding many records in batch, to keep memory use
   from growing as records are added. For example:
   
   for i in range(1000):
       self.new(...)
       for j in range(1000):
           self.child.new(...)
       self.save()
       self.clear()
   
   If you didn't issue clear() after each save(), you'd end up
   with 1000 parent records, and 1000 cursors in the child pointing to
   each of those 1000 parents, and each of those cursors would have
   1000 rows in them.
   
   Due to the destructive nature of this method, you must pass
   confirmed=True. There will be no other warning.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6197:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.cloneRecord(self)
   :noindex:


   
   Creates a copy of the current record and adds it to the dataset. The KeyField
   is not copied.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6198:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.commitTransaction(self, crs=None)
   :noindex:


   
   Attempts to commit a transaction at the database level, and returns
   True/False depending on its success.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6199:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.createAssociation(self, mmOtherTable, mmOtherPKCol, assocTable, assocPKColThis, assocPKColOther)
   :noindex:


   
   Create a many-to-many association. Generally it is better to use the 'addMMBizobj()'
   method, but if you want to set this manually, use this instead of defining the JOINs.
   
   :param mmOtherTable: the name of the table for the other half of the MM relation
   :param mmOtherPKCol: the name of the PK column in the mmOtherTable
   :param assocTable: the name of the table holding the association between the two
   :param assocPKColThis: the name of the column in the association table for this PK
   :param assocPKColOther: the name of the column in the association table for the other PK
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6200:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.createCursor(self, key=None, addToCursorCollection=True)
   :noindex:


   
   Create the cursor that this bizobj will be using for data, and optionally store it
   in the dictionary for cursors, with the passed value of 'key' as its dict key.
   For independent bizobjs, that key will be None. If creating a cursor that will not
   be used as a data source for this bizobj, as when creating many-to-many
   cursors, pass False for the 'addToCursorCollection' parameter.
   
   Subclasses should override beforeCreateCursor() and/or afterCreateCursor()
   instead of overriding this method, if possible. Returning any non-empty value
   from beforeCreateCursor() will prevent the rest of this method from
   executing.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6201:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.dataToXML(self)
   :noindex:


   
   Returns XML representing the data set. If there are child bizobjs,
   the data for the related child records will be nested inside of the
   parent record; this nesting can go as many levels deep as there are
   child/grandchild/etc. bizobjs.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6202:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.delete(self, startTransaction=True, inLoop=False)
   :noindex:


   Delete the current row of the data set.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6203:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.deleteAll(self, startTransaction=True)
   :noindex:


   Delete all rows in the data set.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6204:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.deleteAllChildren(self, startTransaction=True)
   :noindex:


   
   Delete all children associated with the current record without
   deleting the current record in this bizobj.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6205:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.escQuote(self, val)
   :noindex:


   
   Escape special characters in SQL strings.
   
   Escapes any single quotes that could cause SQL syntax errors. Also
   escapes backslashes, since they have special meaning in SQL parsing.
   Finally, wraps the value in single quotes.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6206:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.execute(self, sql, params=None)
   :noindex:


   Execute the sql on the cursor. Dangerous. Use executeSafe instead.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6207:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.executeSafe(self, sql, params=None)
   :noindex:


   
   Execute the passed SQL using an auxiliary cursor.
   
   This is considered 'safe', because it won't harm the contents of the
   main cursor.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6208:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.expireCache(self, recurse=True, _allCursors=False)
   :noindex:


   
   Expire the requery cache so that a subsequent self.Parent.requeryAllChildren()
   will fetch records from the backend instead of using the cached records.
   
   If recurse is True, the cache in the child bizobjs will be expired, too.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6209:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.fieldValidation(self, fld, val)
   :noindex:


   
   This is called by the form when a control that is marked for field-
   level validation loses focus. It handles communication between the
   bizobj methods and the form. When creating Dabo apps, if you want
   to add field-level validation rules, you should override fieldValidation()
   with your specific code.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6210:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.filter(self, fld, expr, op='=')
   :noindex:


   
   This takes a field name, an expression, and an optional operator, and applies that
   to the current dataset. The original dataset is preserved; calling removeFilter() will
   remove the last filter applied to the bizobj. If the current record is in the filtered
   dataset, that record will still be current; if it is filtered out, the current row will
   be row 0.
   If the operator is specified, it will be used literally in the evaluation instead of the
   equals sign, unless it is one of the following strings, which will be interpreted
   as indicated:
   
       | eq, equals: =
       | ne, nequals: !=
       | gt: >
       | gte: >=
       | lt: <
       | lte: <=
       | startswith, beginswith: fld.startswith(expr)
       | endswith: fld.endswith(expr)
       | contains: expr in fld
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6211:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.filterByExpression(self, expr)
   :noindex:


   Allows you to filter by any valid Python expression.
   
   Use the field alias names, for example::
   
       biz.filterByExpression('cust_name[0].lower() = 'a')
   
   where cust_name is a field alias name in this record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6212:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.first(self)
   :noindex:


   
   Move to the first record of the data set.
   
   Any child bizobjs will be requeried to reflect the new parent record. If
   there are no records in the data set, an exception will be raised.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6213:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.formatDateTime(self, val)
   :noindex:


   
   Wrap a date or date-time value in the format
   required by the backend.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6214:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.formatForQuery(self, val)
   :noindex:


   
   Wrap up any value(int, long, string, date, date-time, decimal, none)
   for use to be in a query.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6215:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getAbsoluteName(self)
   :noindex:


   Return the fully qualified name of the object.


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6216:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getAncestorByDataSource(self, ds)
   :noindex:


   
   Given a DataSource, finds the ancestor (parent, grandparent, etc.) of
   this bizobj that has that DataSource. If no such ancestor exists, returns None.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6218:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getChangedRows(self, includeNewUnchanged=False)
   :noindex:


   
   Returns a list of row numbers for which isChanged() returns True. The
   changes may therefore not be in the record itself, but in a dependent child
   record. If includeNewUnchanged is True, the presence of a new unsaved
   record that has not been modified from its defaults will suffice to mark the
   record as changed.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6219:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getChangedStatus(self, ret=None)
   :noindex:


   
   Returns a dictionary of bizobj references and the results of
   getRecordStatus() on each changed row. Use to easily inspect
   the current dirty records in the hierarchy.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6220:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getChildByDataSource(self, dataSource)
   :noindex:


   Return a reference to the child bizobj with the passed dataSource.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6221:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getChildren(self)
   :noindex:


   Return a tuple of the child bizobjs.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6222:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataDiff(self, allRows=False)
   :noindex:


   
   Get a dict that is keyed on the hash value of this bizobj, with the value
   being  a list of record changes. Default behavior is to only consider the
   current row; you can change that by passing allRows=True. Each changed
   row will be present in the diff, with its PK and any columns whose values
   have changed. If there are any related child bizobjs, their diffs will be
   added to the dict under the key 'children' so that they can be processed
   accordingly.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6223:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataSet(self, flds=(), rowStart=0, rows=None, returnInternals=False)
   :noindex:


   
   Get the entire data set encapsulated in a list.
   
   If the optional 'flds' parameter is given, the result set will be filtered
   to only include the specified fields. rowStart specifies the starting row
   to include, and rows is the number of rows to return.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6224:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataStructure(self)
   :noindex:


   
   Gets the structure of the DataSource table. Returns a list
   of 3-tuples, where the 3-tuple's elements are:
   
       | 0: the field name (string)
       | 1: the field type ('I', 'N', 'C', 'M', 'B', 'D', 'T')
       | 2: boolean specifying whether this is a pk field.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6225:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataStructureFromDescription(self)
   :noindex:


   
   Gets the structure of the DataSource table. Returns a list
   of 3-tuples, where the 3-tuple's elements are:
   
       | 0: the field name (string)
       | 1: the field type ('I', 'N', 'C', 'M', 'B', 'D', 'T')
       | 2: boolean specifying whether this is a pk field.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6226:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataTypeForField(self, fld)
   :noindex:


   
   Given a field name, returns its Python type, or None if no
   DataStructure information is available.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6227:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getDataTypes(self)
   :noindex:


   Returns the field type definitions as set in the cursor.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6228:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getFieldClause(self)
   :noindex:


   Returns the current field clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6229:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getFieldNames(self)
   :noindex:


   Returns a tuple of all the field names in the cursor.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6230:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getFieldVal(self, fld, row=None, _forceNoCallback=False)
   :noindex:


   Return the value of the specified field in the current or specified row.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6231:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getFieldVals(self, row=None)
   :noindex:


   Return a dict of the field/value pairs in the current or specified row.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6232:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getFromClause(self)
   :noindex:


   Returns the current from clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6233:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getGroupByClause(self)
   :noindex:


   Returns the current group-by clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6234:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getJoinClause(self)
   :noindex:


   Returns the current join clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6235:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getLimit(self)
   :noindex:


   Returns the current limit clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6236:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getLimitClause(self)
   :noindex:


   Returns the current limit clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6237:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getOrderByClause(self)
   :noindex:


   Returns the current order-by clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6238:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getPK(self)
   :noindex:


   Return the value of the PK field.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6239:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getParams(self)
   :noindex:


   
   Return the parameters to send to the cursor's execute method.
   
   This is the place to define the parameters to be used to modify
   the SQL statement used to produce the record set. Normally if you have
   known parameters, you would simply call setParams(<param tuple>).
   But in cases where the parameter values need to be dynamically calculated,
   override this method in your subclass to determine the tuple to return.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6240:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getParentLinkValue(self)
   :noindex:


   
   Return the value of the parent record on which this bizobj is dependent. Usually this
   is the PK of the parent, but can be a non-PK field, if this bizobj's ParentLinkField is
   not empty.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6241:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getParentPK(self)
   :noindex:


   
   Return the value of the parent bizobjs' PK field. Alternatively,
   user code can just call self.Parent.getPK().
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6242:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getPrecisionForField(self, fld)
   :noindex:


   
   Given a field name, return the decimal precision, or None.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6243:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getProperties(self, propertySequence=(), propsToSkip=(), ignoreErrors=False, \*propertyArguments)
   :noindex:


   
   Returns a dictionary of property name/value pairs.
   
   If a sequence of properties is passed, just those property values
   will be returned. Otherwise, all property values will be returned.
   The sequence of properties can be a list, tuple, or plain string
   positional arguments. For instance, all of the following are
   equivilent::
   
       print self.getProperties("Caption", "FontInfo", "Form")
       print self.getProperties(["Caption", "FontInfo", "Form"])
       t = ("Caption", "FontInfo", "Form")
       print self.getProperties(t)
       print self.getProperties(\*t)
   
   An exception will be raised if any passed property names don't
   exist, aren't actual properties, or are not readable (do not have
   getter functions).
   
   However, if an exception is raised from the property getter function,
   the exception will get caught and used as the property value in the
   returned property dictionary. This allows the property list to be
   returned even if some properties can't be evaluated correctly by the
   object yet.
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-6244:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getRecordStatus(self, rownum=None)
   :noindex:


   
   Returns a dictionary containing an element for each changed
   field in the specified record (or the current record if none is specified).
   The field name is the key for each element; the value is a 2-element
   tuple, with the first element being the original value, and the second
   being the current value.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6245:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getSQL(self)
   :noindex:


   Returns the SQL statement currently set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6246:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getTempCursor(self, sql=None, params=None, requery=True)
   :noindex:


   Occasionally it is useful to be able to run ad-hoc queries against
   the database. For these queries, where the results are not meant to
   be managed as in regular bizobj/cursor relationships, a temp cursor
   will allow you to run those queries, get the results, and then dispose
   of the cursor.
   
   If you send no arguments, you'll get a cursor to use how you want, like::
   
       cur = self.getTempCursor()
       cur.UserSQL = "select count(*) as count from invoices where cust_id = ?"
       cur.requery((883929,))
       invoiceCount = cur.Record.count
   
   But you can also simplify by sending the sql and params in the call::
   
       cur = self.getTempCursor("select count(*) as count...", (883929,))
       invoiceCount = cur.Record.count
   
   Note that if you send params, the cursor will be requeried even if
   the requery arg is False.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6247:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getWhereClause(self)
   :noindex:


   Returns the current where clause set in the backend.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6248:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.getWordMatchFormat(self)
   :noindex:


   
   Returns the backend's SQL format for creating queries that are based
   on matching words in a given column.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6249:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.hasPK(self, pk)
   :noindex:


   Return True if the passed PK value is present in the dataset.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6250:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.initEvents(self)
   :noindex:


   
   Hook for subclasses. User code should do custom event binding
   here, such as::
   
       self.bindEvent(dEvents.GotFocus, self.customGotFocusHandler)
   
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6251:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.initProperties(self)
   :noindex:


   
   Hook for subclasses. User subclasses should set properties
   here, such as::
   
       self.Name = "MyTextBox"
       self.BackColor = (192,192,192)
   
   


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6252:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.isAnyChanged(self, includeNewUnchanged=None, withChildren=True)
   :noindex:


   
   Return True if at least one record in the current record set
   has been changed.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6253:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.isChanged(self, includeNewUnchanged=None, withChildren=True)
   :noindex:


   
   Return True if data has changed in this bizobj and any children.
   
   Only the current record is checked. Call isAnyChanged() to
   check all records.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6254:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.isRemote(self)
   :noindex:


   
   Returns True/False, depending on whether this bizobj's connection
   is remote or not.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6255:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.isRowChanged(self, includeNewUnchanged=None)
   :noindex:


   
   Return True if data has changed in the current row
   of this bizobj, without any children.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6256:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.last(self)
   :noindex:


   
   Move to the last record of the data set.
   
   Any child bizobjs will be requeried to reflect the new parent record. If
   there are no records in the data set, an exception will be raised.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6257:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.locate(self, val, fld=None, caseSensitive=False, movePointer=True, runRequery=True)
   :noindex:


   
   Search for a value in a field, and optionally move the record pointer to the first
   matching record. Returns the True or False, depending on whether the value was found.
   
   Multiple fields can be searched by sending tuples as the val and fld arguments.
   
   If runRequery is True, and the record pointer is moved, all child bizobjs
   will be requeried, and the afterPointerMove() hook method will fire.
   
   This is very similar to the seek() method, with two main differences: there
   is no concept of a near-match; either the value is found or it isn't; the return
   value is a boolean indicating if the match was found, not the matching RowNumber.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6258:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.lookupPKWithAdd(self, field, val)
   :noindex:


   Runs a lookup in the specified field for the desired value. If
   found, returns the PK for that record. If not found, a new record is
   created with the 'field' column populated with 'val', and the new
   record's PK is returned. None of this affects the current dataset.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6259:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmAddToBoth(self, bizOrDS, thisField, thisVal, otherField, otherVal)
   :noindex:


   
   Creates an association in a M-M relationship. If the relationship
   already exists, nothing changes. Otherwise, this will ensure that
   both values exist in their respective tables, and will create the
   entry in the association table.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6260:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmAssociateValue(self, bizOrDS, otherField, otherVal)
   :noindex:


   
   Associates the value in the 'other' table of a M-M relationship with the
   current record in the bizobj. If that value doesn't exist in the other
   table, it is added.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6261:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmAssociateValues(self, bizOrDS, otherField, listOfValues)
   :noindex:


   
   Adds association records so that the current record in this bizobj is associated
   with every item in listOfValues. Other existing relationships are unaffected.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6262:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmDissociateAll(self, bizOrDS)
   :noindex:


   
   Removes all associations between the current record and the associated
   M-M table.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6263:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmDissociateValue(self, bizOrDS, otherField, otherVal)
   :noindex:


   
   Removes the association between the current record and the specified value
   in the 'other' table of a M-M relationship. If no such association exists,
   nothing happens.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6264:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmDissociateValues(self, bizOrDS, otherField, listOfValues)
   :noindex:


   
   Removes the association between the current record and every item in 'listOfValues'
   in the 'other' table of a M-M relationship. If no such association exists,
   nothing happens.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6265:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmGetAssociatedValues(self, bizOrDS, listOfFields)
   :noindex:


   
   Given a relationship, returns the values associated with the current
   record. 'listOfFields' can be either a single field name, or a list
   of fields in the associated table.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6266:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.mmSetFullAssociation(self, bizOrDS, otherField, listOfValues)
   :noindex:


   
   Adds and/or removes association records so that the current record in this
   bizobj is associated with every item in listOfValues, and none other.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6267:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.moveToPK(self, pk)
   :noindex:


   Move to the row with the specified pk value, or raise RowNotFoundException.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6268:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.moveToRowNumber(self, rowNumber)
   :noindex:


   Move to the specified row number.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6269:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.new(self, fieldVals=None, \**kwargs)
   :noindex:


   
   Create a new record and populate it with default values. Default
   values are specified in the DefaultValues dictionary.
   
   You may also pass a fieldVals dict or named arguments to set
   field values after the new() call is complete.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6270:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.next(self)
   :noindex:


   
   Move to the next record of the data set.
   
   Any child bizobjs will be requeried to reflect the new parent record. If
   there are no records in the data set, an exception will be raised.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6271:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.oldVal(self, fieldName, row=None)
   :noindex:


   
   Returns the value that was in the specified field when it was last fetched
   from the backend. Used to determine if the current value has been modified.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6272:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.onDeleteLastRecord(self)
   :noindex:


   Hook called when the last record has been deleted from the data set.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6273:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.onNew(self)
   :noindex:


   
   Called when a new record is added.
   
   Use this hook to add additional default field values, or anything else
   you need. If you change field values here, the memento system will not
   catch it (the record will not be marked 'dirty'). Use afterNew() if you
   instead want the memento system to record the changes.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6274:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.onSaveNew(self)
   :noindex:


   Hook method called after successfully saving a new record.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6275:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.prepareWhere(self, clause)
   :noindex:


   
   Calls the backend's pre-processing routine for improving efficiency
   of filter expressions. If the backend does not have this capability,
   nothing is done.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6276:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.prior(self)
   :noindex:


   
   Move to the prior record of the data set.
   
   Any child bizobjs will be requeried to reflect the new parent record. If
   there are no records in the data set, an exception will be raised.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6277:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.raiseEvent(self, eventClass, uiEvent=None, \*args, \**kwargs)
   :noindex:


   
   Send the event to all registered listeners.
   
   If uiEvent is sent, dEvents.Event will be able to parse it for useful
   information to send along to the callback.
   
   Additional arguments, if any, are sent along to the constructor    of the
   event. While this feature exists so that UI-lib event handlers can pass
   along information (such as the keystroke information in a key event), user
   code may pass along additional arguments as well, which    will exist in the
   event.EventData dictionary property.
   
   In most cases, user code should call raiseEvent() with
   the event class (dEvents.Hit, for example) as the only parameter.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-6278:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeAllChildren(self)
   :noindex:


   
   Remove all child bizobjs.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6279:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeChild(self, child)
   :noindex:


   
   Remove the passed child bizobj from this bizobj.
   
   If the specified child bizobj isn't a child of this bizobj, raise
   ValueError.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6280:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeField(self, exp, alias=None)
   :noindex:


   Remove a previously added field from the field clause.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6281:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeFilter(self)
   :noindex:


   Remove the most recently applied filter.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6282:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeFilters(self)
   :noindex:


   Remove all applied filters, going back to the original data set.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6283:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeMMBizobj(self, mmBizobj)
   :noindex:


   
   Removes the specified bizobj from a Many-to-Many relationship. If no such
   relationship exists, nothing happens.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6284:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.removeWhere(self, exp, comp='and')
   :noindex:


   Remove a previously-added filter expression from the where clause.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6285:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.replace(self, field, valOrExpr, scope=None)
   :noindex:


   
   Replaces the value of the specified field with the given value
   or expression. All records matching the scope are affected; if
   no scope is specified, all records are affected.
   
   'valOrExpr' will be treated as a literal value, unless it is prefixed
   with an equals sign. All expressions will therefore be a string
   beginning with '='. Literals can be of any type.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6286:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.requery(self, convertQMarks=False)
   :noindex:


   
   Requery the data set.
   
   Refreshes the data set with the current values in the database,
   given the current state of the filtering parameters.
   
   If convertQMarks is True (default is False), any ?'s in the sql will
   get converted to whatever the marker is for the database backend.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6287:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.requeryAllChildren(self, _doRequery=True)
   :noindex:


   
   Requery each child bizobj's data set.
   
   Called to assure that all child bizobjs have had their data sets
   refreshed to match the current master row. This will normally happen
   automatically when appropriate, but user code may call this as well
   if needed.
   
   Note: children will only be requeried if their cache hasn't expired
   yet. If you want to force all children to requery at the next opportunity,
   you should call self.expireCache() before calling self.requery() or
   self.requeryAllChildren().
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6288:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.rollbackTransaction(self, crs=None)
   :noindex:


   
   Attempts to rollback a transaction at the database level, and returns
   True/False depending on its success.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6289:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.save(self, startTransaction=True, saveTheChildren=True)
   :noindex:


   
   Save any changes that have been made in the current row.
   
   If the save is successful, the saveAll() of all child bizobjs will be
   called as well if saveTheChildren is True (the default).
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6290:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.saveAll(self, startTransaction=True, saveTheChildren=True)
   :noindex:


   
   Save changes to all rows in the bizobj, and (by default) the children.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6291:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.scan(self, func, \*args, \**kwargs)
   :noindex:


   
   Iterate over all records and apply the passed function to each.
   
   Set self.exitScan to True to exit the scan on the next iteration.
   
   If self.ScanRestorePosition is True, the position of the current
   record in the recordset is restored after the iteration.
   
   If self.ScanRequeryChildren is True, any child bizobjs will be requeried
   for each row in the bizobj. Only use this if you know the size of the data
   involved will be small.
   
   You may optionally send reverse=True to scan the records in reverse
   order, which you'll want to do if, for example, you are deleting
   records in your scan function. If the reverse argument is not sent,
   self.ScanReverse will be queried to determine the behavior.
   
   Returns value from 'func' called in the last iteration.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6292:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.scanChangedRows(self, func, allCursors=False, includeNewUnchanged=False, \*args, \**kwargs)
   :noindex:


   
   Move the record pointer to each changed row, and call func.
   
   If allCursors is True, all other cursors for different parent records will
   be iterated as well.
   
   If includeNewUnchanged is True, new unsaved records that have not been
   edited from their default values will be counted as 'changed'.
   
   If you want to end the scan on the next iteration, set self.exitScan=True.
   
   Records are scanned in arbitrary order. Any exception raised by calling
   func() will be passed    up to the caller.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6293:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.scanKeys(self, func, keys, \*args, \**kwargs)
   :noindex:


   
   Iterate over the specified keys (defined in KeyField) and apply
   the passed function to each.
   
   If a passed key doesn't exist, it is ignored.
   
   Set self.exitScan to True to exit the scan on the next iteration.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6294:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.scanRows(self, func, rows, \*args, \**kwargs)
   :noindex:


   
   Iterate over the specified rows and apply the passed function to each.
   
   Set self.exitScan to True to exit the scan on the next iteration.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6295:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.scanVirtualFields(self, fld, expr, op)
   :noindex:



Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6296:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.seek(self, val, fld=None, caseSensitive=False, near=False, runRequery=True, sort=True, incremental=False)
   :noindex:


   
   Search for a value in a field, and move the record pointer to the match.
   Multiple fields can be searched by sending tuples for the val and fld
   arguments.
   
   Used for searching of the bizobj's cursor for a particular value in a
   particular field. Can be optionally case-sensitive.
   
   If 'near' is True, and no exact match is found in the cursor, the cursor's
   record pointer will be placed at the record whose value in that field
   is closest to the desired value without being greater than the requested
   value.
   
   If runRequery is True, and the record pointer is moved, all child bizobjs
   will be requeried, and the afterPointerMove() hook method will fire.
   
   If sort is True (the default), then we seek to the first matching value
   without sorting first.
   
   If incremental is True (default is False), then we only compare the first
   characters up until the length of val.
   
   Returns the RowNumber of the found record, or -1 if no match found.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6297:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setChildLinkFilter(self)
   :noindex:


   
   If this is a child bizobj, its record set is dependent on its parent's
   current PK value. This will add the appropriate WHERE clause to
   filter the child records. If the parent is a new, unsaved record, or if
   there is no parent record, there cannot be any child records saved yet,
   so an empty query is built.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6298:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setConnection(self, conn)
   :noindex:


   Normally connections are established before bizobj creation, but
   for those cases where connections are created later, use this method to
   establish the connection used by the bizobj.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6299:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setCurrentParent(self, val=None)
   :noindex:


   
   Lets dependent child bizobjs update to the current parent
   record.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6300:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setFieldClause(self, clause)
   :noindex:


   Explicitly set the field clause. Replaces any existing field settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6301:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setFieldVal(self, fld, val, row=None, pk=None)
   :noindex:


   Set the value of the specified field in the current or specified row.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6302:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setFieldVals(self, valDict=None, row=None, pk=None, \**kwargs)
   :noindex:


   
   Allows you to set the value for multiple fields with one call by passing a dict
   containing the field names as keys, and the new values as values.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6303:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setFromClause(self, clause)
   :noindex:


   Explicitly set the from clause. Replaces any existing from settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6304:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setGroupByClause(self, clause)
   :noindex:


   Explicitly set the group-by clause. Replaces any existing group-by settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6305:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setJoinClause(self, clause)
   :noindex:


   Explicitly set the join clauses. Replaces any existing join settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6306:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setLimit(self, clause)
   :noindex:


   Explicitly set the limit clause. Replaces any existing limit settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6307:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setLimitClause(self, clause)
   :noindex:


   Explicitly set the limit clause. Replaces any existing limit settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6308:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setOrderByClause(self, clause)
   :noindex:


   Explicitly set the order-by clause. Replaces any existing order-by settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6309:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setParams(self, params)
   :noindex:


   
   Set the query parameters for the cursor.
   
   Accepts a tuple that will be merged with the sql statement using the
   cursor's standard method for merging.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6310:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setParentFK(self, val=None, allRows=True)
   :noindex:


   
   Accepts and sets the foreign key value linking to the
   parent table for all records.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6311:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setProperties(self, propDict={}, ignoreErrors=False, \**propKw)
   :noindex:


   
   Sets a group of properties on the object all at once.
   
   You have the following options for sending the properties:
   
       1) Property/Value pair dictionary
       2) Keyword arguments
       3) Both
   
   The following examples all do the same thing::
   
       self.setProperties(FontBold=True, ForeColor="Red")
       self.setProperties({"FontBold": True, "ForeColor": "Red"})
       self.setProperties({"FontBold": True}, ForeColor="Red")
   
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-6312:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setPropertiesFromAtts(self, propDict={}, ignoreExtra=True, context=None)
   :noindex:


   
   Sets a group of properties on the object all at once. This
   is different from the regular setProperties() method because
   it only accepts a dict containing prop:value pairs, and it
   assumes that the value is always a string. It will convert
   the value to the correct type for the property, and then set
   the property to that converted value. If the value needs to be evaluated
   in a specific namespace, pass that as the 'context' parameter.
   


Inherited from: :ref:`dabo.lib.propertyHelperMixin.PropertyHelperMixin`

-------

.. _no-6313:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setSQL(self, sql=None)
   :noindex:


   
   Set the SQL query that will be executed upon requery().
   
   This allows you to manually override the sql executed by the cursor. If no
   sql is passed, the SQL will get set to the value returned by getSQL().
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6314:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setValues(self, valDict=None, row=None, pk=None, \**kwargs)
   :noindex:



Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6315:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.setWhereClause(self, clause)
   :noindex:


   Explicitly set the where clause. Replaces any existing where settings.


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6316:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.sort(self, col, ordr=None, caseSensitive=True)
   :noindex:


   
   Sort the rows based on values in a specified column.
   
   Called when the data is to be sorted on a particular column
   in a particular order. All the checking on the parameters is done
   in the cursor.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6317:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.super(self, \*args, \**kwargs)
   :noindex:


   This method used to call superclass code, but it's been removed.


Inherited from: :ref:`dabo.dObject.dObject`

-------

.. _no-6318:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.unbindEvent(self, eventClass=None, function=None)
   :noindex:


   
   Remove a previously registered event binding.
   
   Removes all registrations that exist for the given binding for this
   object. If event is None, all bindings for the passed function are
   removed. If function is None, all bindings for the passed event are
   removed. If both event and function are None, all event bindings are
   removed.
   


Inherited from: :ref:`dabo.lib.eventMixin.EventMixin`

-------

.. _no-6319:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.validateField(self, fld, val)
   :noindex:


   
   This is the method to override if you need field-level validation
   to your app. It will receive the field name and the new value; you can
   then apply your business rules to determine if the new value is
   valid. If not, return a string describing the problem. Any non-empty
   return value from this method will prevent the control's value
   from being changed.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------

.. _no-6320:

.. function:: dabo.lib.datanav.Bizobj.Bizobj.validateRecord(self)
   :noindex:


   
   Hook for subclass business rule validation code.
   
   This is the method that you should customize in your subclasses
   to create checks on the data entered by the user to be sure that it
   conforms to your business rules. Your validation code should return
   an error message that describes the reason why the data is not
   valid; this message will be propagated back up to the UI where it can
   be displayed to the user so that they can correct the problem.
   
   Example::
   
       if not myNonEmptyField:
           return "MyField must not be blank"
   
   It is assumed that we are on the correct record for testing before
   this method is called.
   


Inherited from: :ref:`dabo.biz.dBizobj.dBizobj`

-------


|
